


in scope now:
[x]send code
[]validate code
[]assign user tag on submit
[]notice a live code after refresh and put up box to get it
[x]limit with trail_table
[x]necessary limitations
[x]additional limitations

in scope soon:
[x]button component
[x]turnstile
[]email or sms
[]see how :class and class together work
[]get enterkeyhint working and decide about it






actually maybe it's
"Code B 1234 for brand - Don't tell anyone..." no hyphen, yes, seeing iphone then offer to copy the code and take just the 1234 part
and then the box is
Code B [    ] [Enter] clearly not something you need to type
because (Code B) is (1234) rather than (Code) is (B 1234)


a code challenge proves a link between
	address == browser tag
to then sign in a user, which is a link between
             browser tag == user tag
think about these relationships, fundamentally, when designing today


so there's a complete flow coming together here
and it's all based on browser tag
but that's enough to run it!







"Code J-7148 from brand. Don't tell anyone, they could steal your whole account!"
Code [J-    ] [Enter] _I can't find it_

We emailed Code J to you at name@example.com 25sec ago from our email noreply@example.com.
Check your spam or promotions folders
_Correct my email_, _Send a new code_ or _Try another way_

We texted Code J to you at +1 909 555 1234 1min 25sec ago from our number 888 123 4567.
Check your messages!
_Correct my number_, _Send a new code_ or _Try another way_

^and have those count up in time on the page, soft melt to next five second increment
or actually just say the time it was sent, because that will match the email time
and you don't have to refresh the duration that counts forward



more text you could add later to the code email:
Codes last 20 minutes.
A browser in ðŸ‡ºðŸ‡¸ Akron OH 44321 US requested a code to this address.
Not you? Visit the site and review your security settings!

and as another feature after that:
https://www.npmjs.com/package/ua-parser-js 15mm weekly downloads
"A Chrome browser on a Samsung Galaxy phone"
"A Firefox browser on a Microsoft Surface tablet"
"A Safari browser on an Apple iPad tablet"
"An Edge browser on a Windows laptop"
"A Chrome browser on a MacBook desktop"
"A Samsung Internet browser on a Samsung Galaxy Tab tablet"
"A Brave browser on a Linux desktop"
"A Chrome browser on a Google Pixel phone"
and be ready to shorten the sentence rather than saying unknown or default, maybe clearlist common ones so only they show up
so even if you get "Samsung Internet" from ua parser you just say "A browser" because the user might be using that, but not know it by that brand
Firefox, Chrome, Safari, "browser"
iPhone, Samsung, Mac
phone, tablet, laptop, PC, "device"
yeah, you could make this complicated






also realized when a code expires, the box should disappear on the page!
the page will have its own timer for this
and should probably disappear a minute early, too! (or say 20 minutes but actually it's 25, actually, the grace period)







thinking having stepped away
you're not just validating the address, you're also checking the person at the device, so for security, you should make it so the catch box only appears on the same browser where the person entered the address to challenge
























trailtable lets you hash a message that says anything
and see how many times it's been recorded
and when each time was recorded

start with simplest happy path interaction

new person navigates to page
browser assigns browser tag
they don't have a user tag

person enters new valid sms number, presses send code
server assigns user tag, provisional user
server texts code

person enters code into box
server has proof that this user controls this address
user isn't provisional anymore, now they're standard
server signs user into browser

user goes to browser on different device
browser assigns browser tag

user enters same valid sms number, presses send code
server finds existing user tag, but doesn't sign in user
server texts code

user enters code into box
server has proof that this is the same user as before
server signs user into browser





there's going to be another component that receives the code
when does it show up?
when this browsertag has a live code
see if you can do this without involving the user tag






standard user signed into this browser, address controlled:
	a signed in standard user typed another user's address--send no code!
standard user signed into this browser, address not controlled:
	user is adding additional address, send a code
no standard user signed into this browser, address controlled:
	user is signing into additional browser, send a code
no standard user signed into this browser, address not controlled:
	person is all new, send a code

ok, now all you have to define is
how do you get user tag is here and standard (you have a function for this)
tell me about this address, is it controlled by a user or not (next, make tables and functions for this)




simplest happy path
new person navigates browser, gets browser tag
enters new address, presses submit
endpoint has browser tag, no user tag, brand new address
server makes random code, sends it to address
site knows code for this browser is live, puts up catch box
person types code into catch box
server sees that code is valid, does three things
- makes standard user tag
- signs user into browser
- identifies address as controlled by user












soon, to make sure you've got the provisional user tag right
users will type in dob first
and imagine the flow that starts with credit card number

another common path
the user is lazy, and never enters the code
they return to the same browser
they start a "i want back in here" flow on another browser
you need to solve this without:
- annoying the user
- letting the user fat finger their way to a starting mess of two accounts






1[x] send a sms
2[x] put in limits
3[] record in address_table (user enters address, which is Challenged. Proven. Removed.)
4[] generate or tie to user tag, user tag is generated on first address submission so you always have browser tag and user tag





how does enterkeyhint work now that you have PostButton, and the form is above?
or, this really doesn't matter because you want to avoid it, to direct the user's attention back to the page, which is where the next question, or the thing the need to fix, will be

<!-- ttd february, enterkeyhint showing up on iphone keyboard, maybe because you're using and changing :disabled. so you could try to fix that, mostly out of curiosity, or not use it at all, to direct the user's attention back to the page, which is probably what you want to do for usability and consistancy. no, it's because you haven't done the enclosing form with submit prevent yet -->








quick thinking about the actual flow
common lazy happy path
user visits site on phone
Sign Up, Log In separate
chooses Sign Up
enters birthday
E-mail, Phone, other ways, separate
chooses Email
enters address
ignores code

returns next day
still signed in? yes, because provisional user tied to browser tag

goes to laptop
chooses Sign In
enters birthday
E-mail, Phone, other ways, separate
chooses Email
enters address
(at this oint the system can detect things generally look lazy and clean:)
- this user is new and low risk
- the address is only mentioned twice
so, we sign the user in (now they do have to have a user tag, maybe they got it yesterday on their phone)
and also repeat the code (maybe they'll enter it now)

hmmm... still thinking and gaming out you need to do here



















a user might request a code to their address once to sign up
and again, the next day, to sign in a second device

another user might specify codes to that address as their second factor authentication
either for sudo hour
or for a single transaction

the first user will have two codes sent
the second user will have lots of codes sent

it would be great if address_table just recorded challenges and validations
and didn't care what they were for
but of course, if user1 has validated address1 with code1
and then (either to second factor or sign in another device) requests code2
but never validates it (they get sidetracked)
user1 *still* controls address1!
so make sure your rules allow for that






later, be able to add
"Is +1 789 555 1234 still your number? [Yes] [No]"
"Is name@example.com still your email? [Yes] [No]"
do that if the haven't validated it in 6 months or whatever, either initial validation, or a later validation for sudo hour or individual destructive transaction permission
also, if they say no, but that's the only way you have to identify them, what do you do?






a nice thing about address_table is, unlike browser_table, it doesn't have to be super fast
a returning user can navigate to the site, be signed in, get their feed, all without touching address_table
if things like adding, validating, removing an address take half-seconds of database round trips, that's fine

so, you can do more processing in the worker after getting more rows
and you don't need to hide rows to make queries easy




wait, validated should be verified




simple happy path you're coding
user signs up on browser1, validating his email
user signs in on browser2, validating that same email
and at that point, you need to code
cold3.cc/settings
and on it, there will be a list of addresses, both challenged and validated
and links like _Verify_ and _Remove_
all of this needs to be on your plate right now













there is a function



function 












	/*
	can't find it
	- just sent it, so wait
	- sent a minute ago, so actually check
	- sent two minutes ago, and can

	_i cant find it_

	>just sent
	wait
	>sent a minute ago
	actually check



	*/

	/*
	if the code the user has been working on expired or was guessed to death, you'll get no code records at all, merge in []
	and success false, guessAgain false

	what really does CodeEnterComponent do?
	it's there because the page knows this browser has a code the user could find and enter
	it's tied to a specific code challenge, it has the code tag and prefix letter

	what's the minimal ui copy here?

	Check your email|texts for the code we sent
	*/


	/*
	response will be correct: true, false
	and lives: 0, 1+
	you can also tell if they guessed this code already, with lives < Code.guesses or whatever

	on correct, just say thanks, and disappear in a few seconds or a click
	on wrong, still lives, say wrong, let them try again

	on wrong, no more lives, say wrong, tell them to request a new code

	and update the pinia store accordingly, removing dead codes from the array? no, setting lives and correct, and then letting this render appropriately!
	*/




/*
<p>
	we sent the code at {{sayTimePage(code.tick)}} and it'll last for {{Code.lifespan20/Time.minute}} minutes from then,
	until {{sayTimePage(code.tick + (20*Time.minute))}}. After that, you'll have to request a new one.
</p>
*/
















