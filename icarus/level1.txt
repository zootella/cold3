








things that fit neatly into the validate pattern

[]email
[]phone
[]card
[x]date

things that are similar, but not a perfect fit to that pattern

name, title, post: including spaces, paragraphs, slugs
password strength
action sent to api

[]familiarize yourself with email, phone, card tests, and align with isValid, formNormal, formFormal, formPage
[]organize the other text validation stuff in level1, like name, title, post, you wrote yesterday







/*
design teh form
user name [MyName]
appear on the page "MyName"
appear in links [MyName]
this link also works "myname"

1-42 numbers and letters; -_. ok but not in a row

user changes text in the first box, second box automatically set
but also, user can edit second box separately
so accented latin goes unadorned
and user can type all kanji into the first box and their english translation in the second
*/




for the name validation rules, you have this note:
//and research what current popular platforms do--you haven't done enough research for this to design it properly
which is a really good idea, and you coded it all without doing that






















on the front end:
user types namePagepageName, gets suggestions for routeName and gets to see lookName
user edits routeName, pageName doesn't change, lookName does
user sees if what they've got is valid

on the back end:
validate all three, in the future

validate pageName before saving it in the database, in a distant table
validate lookName before saving it in the table you're on now

ttd march
[]user types name, other two are set automatically
	but then user adjusts route, and that changes look but not name
[]visitor navigates to route, and route changes to userRoute, capitalizing things for instance
[]user edits route, but not in a way that changes look, so you don't have to adjust that table













/*
these are all single line text boxes
with text based live feedback
and then validation, and different forms

[]password
[]email address
[]phone number
[]user name
[]user identifier user1234

email
phone
email or phone, the combination of those two
password


ttd february
*/


























/*
here's a good first pinia task, maybe
have log output that shows in /log, and any page, as you click around, can add to
*/














/*
Blog titles can't be longer than 32 characters.
Post titles, notes and other short text messages are limited to 500 characters.

Other username length limits:    Other short post limits:
-----------------------------    ---------------------------
15 Twitter                       140 Twitter classic
20 Reddit                        280 Twitter
30 Gmail                         500 Mastodon, and our limit
32 Tumblr, and our limit
*/





















//scrap notes; you do have a working deindent in level0, you just realized

/*
deindent
the first line will be blank
the second line, the whitespace that starts it, must be removed from later lines
actually just remove tabs, spaces after tabs stay, spaces stay
later lines, that number of spaces, remove them
the last line will be just whitespace, omit it
*/

//                                                       _       
//  ___  ___ _ __ __ _ _ __    _ __ ___   __ _ _ __ __ _(_)_ __  
// / __|/ __| '__/ _` | '_ \  | '_ ` _ \ / _` | '__/ _` | | '_ \ 
// \__ \ (__| | | (_| | |_) | | | | | | | (_| | | | (_| | | | | |
// |___/\___|_|  \__,_| .__/  |_| |_| |_|\__,_|_|  \__, |_|_| |_|
//                    |_|                          |___/         

//given a multiline string with blank first and last lines, and a whitespace margin before each line, remove that margin
//returns s unchanged if anything doesn't look right
function margin(s) {
	var l = stringToLines(s);
	if (!l.length) return s;//no lines
	if (hasText(l[0]) || hasText(l[l.length - 1])) return s;//edge text
	if (!(starts(l[1], " ") || starts(l[1], "\t"))) return s;//first line must start with space or tab

	var f = l[1];//first line
	var w = start(f, 1);//tab or space character
	var n = 0;//number of those at the start of the first line
	for (var i = 0; i < f.length; i++) { if (f[i] == w) n++; else break; }
	if (!n) return s;

	var a = [];//array to fill and return
	for (var i = 1; i < l.length - 1; i++) {//loop through lines not including blank first and last
		var line = l[i];
		if (hasText(line)) {
			if (line.length < n) return s;//line too short
			for (var j = 0; j < n; j++) { if (line[j] != w) return s; }//line doesn't start with w characters
			a.push(beyond(line, n));
		} else {
			a.push(line);
		}
	}
	return linesToString(a);
}
exporty({margin});











./server/api/message.js ~ just to see how you used the messaging functions

	//this is in place of checking the message and making it safe
	message = message.replace(/[^a-zA-Z0-9 ]/g, '').replace(/\s+/g, ' ').slice(0, Size.kb).trim()
	r.network23Response = await fetchNetwork23($fetch, provider+service, '/message', {provider, service, address, message})

provider must be Amazon. or Twilio.
service must be Email. or Phone.
based on service, address must validate as email or phone (you don't need to try both of them here)
message must be not too long and not contain any special characters

toss if doesn't make it through that gauntlet
then call lambda to send the messaging
all the database and datadog can be here in the worker, calling the lambda is essentially calling the api

of course there's that first call where you just warm it up, and that's built into fetchNetwork23 providerDotService

and to start
-don't do the warmup thing yet, and
-have the lambda just print out what it would do, to local console
this is easy and you can do it now
also, when you're sending locally, aws is already authenticated

[]should that Business Intelligence behind this form be a function in level3.js that both the nuxt page and nuxt api call? (methinks, yes)





you sorta came up with a format for enums in data, which is title case, ends with period
this isn't bad, really--you can easily identify them in code, and can string them together if you need to







so the validations are:
(1) page, untrusted, as the user types
(2) page, untrusted, when the user submits
(3) worker, trusted, what got posted at us
(4) what the worker sends apis
(5) katy, before editing the database

the lambdas dont need to validate anything, all that code can be here in the worker
the lambdas can be really simple and dumb




















