








things that fit neatly into the validate pattern

[]email
[]phone
[]card
[x]date

things that are similar, but not a perfect fit to that pattern

name, title, post: including spaces, paragraphs, slugs
password strength
action sent to api

[]familiarize yourself with email, phone, card tests, and align with isValid, formNormal, formFormal, formPage
[]organize the other text validation stuff in level1, like name, title, post, you wrote yesterday







/*
design teh form
user name [MyName]
appear on the page "MyName"
appear in links [MyName]
this link also works "myname"

1-42 numbers and letters; -_. ok but not in a row

user changes text in the first box, second box automatically set
but also, user can edit second box separately
so accented latin goes unadorned
and user can type all kanji into the first box and their english translation in the second
*/






//t1-t2-Net-Win-OS9-Uni-null-terminator
/*
	// Step 1 (Normalization):
	// 1a: Remove accents (e.g., using NFD/NFKD to turn 'á' into 'a').
	s = deaccent(s)
	// 1b: Convert fancy punctuation (e.g., em-dash, en-dash, and multiple hyphens/dashes) into a simple ASCII hyphen.
	s = s.replace(/[-–—]+/g, '-')
	// allow all the RFC 3986 characters: letters (A-Z, a-z), digits (0-9), whitespace, hyphen, underscore, period, and tilde.
	s = s.replace(/[^A-Za-z0-9\s\-_.~]/g, ' ')

	// Step 2 (Whitespace Handling):
	// 2a: Replace all groups of whitespace (spaces, tabs, newlines) with a single space.
	s = s.replace(/\s+/gu, ' ')
	// 2b: Trim leading and trailing whitespace.
	s = s.trim()
	// 2c: Replace spaces with hyphens to form word boundaries.
	s = s.replace(/ /g, '-')

	// Step 3 (Punctuation Normalization):
	// 3a: Collapse long sequences of allowed punctuation (e.g., more than two hyphens) to a maximum of two.
	s = s.replace(/([-._~]{3,})/g, match => match.slice(0, 2))
	// 3b: Collapse 2 or more periods into a single period.
	s = s.replace(/\.{2,}/g, '.');

	// Step 4 (Length Truncation):
	// 4a: Enforce the maximum slug length by truncating to slugLength.
	s = s.slice(0, slugLength)

	//must begin with a letter or underscore, can end with a letter, number, or underscore
	s = s.replace(/^[^A-Za-z_]+|[^A-Za-z0-9_]+$/g, '')
















	ok, from our conversation, i've assembeled the above draft of our implementation as a whole
	check it, and make sure it's behavior with a wide variety of input, including malicious input, will match the following specification we were given to code today, repeated here:

	let's allow all the RFC 3986 characters, even tilde

	make a pass that doesn't change the length, but does improve characters, which would
	remove accents from vowels
	turn dashes into a single hyphen, em and en dashes, and --, all of those, into just -

	then let's attack whitespace
	replace all groups of sapce, tab, and newline characters with a single space
	and trim the ends
	and then replace spaces with hyphen

	then let's allow, but guard against, long sequences of only puncutation characters
	two puncutation characters in a row are ok
	if there is a string of more than that, though, we want to keep only the first two
	so __This-Is-Fine__ while ~~~Something becomes ~~Something

	and, there are additional rules for periods
	periods are ok, but two in a row become one
	and any on the edges are removed


	before we dive into code, let's talk generally about these steps
	are some unnecessary?
	are there some others along these lines that im not thinking of?
	what order should we do these steps in? how can we group them together into named stages of processing the input?

	*/

/*




According to RFC 3986, URLs are allowed to include a set of characters called the unreserved characters:
AZaz09
~.-_


		!(/[._-]{2}/.test(s))//but those three allowed characters can't appear together!
		//ttd january, maybe also can't have a period at the start or the end
		//and research what current popular platforms do--you haven't done enough research for this to design it properly

ok, here's your uninformed draft
for simplicity, same rules for user names and post titles, how about
same length, super long 42

allow all the rfc3986 characters, even tilde
allow two of them together, but no longer, so you can do __SeverelyUnderlined__
allow period, but here you can't do dots at the start or the end, and you can't do two dots together

replace accented characters with their nonaccented versions
remove illegal characters, just take the safe ones
itls ok if the resulting input is blank--we'll handle this elsewhere in the stack!




Alphabets: A–Z and a–z
Digits: 0–9
Punctuation: Hyphen (-), Period (.), Underscore (_), and Tilde (~



*/












//  _     _      _   _         _             
// | |__ (_)_ __| |_| |__   __| | __ _ _   _ 
// | '_ \| | '__| __| '_ \ / _` |/ _` | | | |
// | |_) | | |  | |_| | | | (_| | (_| | |_| |
// |_.__/|_|_|   \__|_| |_|\__,_|\__,_|\__, |
//                                     |___/ 

/*
ttd february
you need to do this with birthdays
user types it, YYYYMMDD, validate that, spell it out in words as they type
obviously use the validate pattern you've got below for this
so the form for the database is probably "YYYYMMDD" as text, not a number
and the v returned has extra number types attached for .year .month .day

test thsi out with the mobile keypad--can you disable the submit button when it's on the mobile keyboard and not the page? how does that work?

and then, calculate the age of that birthday
taking and using the local time zone as known by the page
so if it's 12:30 AM local time on the page
it may be easiest to get the day today local on the page
and then sanity check that on the server with the server clock
how does that work? is UTC at the start, end, or middle, oh right it's middle, of midnight around the world
*/
















/*
on the front end:
user types namePagepageName, gets suggestions for routeName and gets to see lookName
user edits routeName, pageName doesn't change, lookName does
user sees if what they've got is valid

on the back end:
validate all three, in the future

validate pageName before saving it in the database, in a distant table
validate lookName before saving it in the table you're on now


more on this
stuff you could do:
- user types name, other two are set automatically
	but then user adjusts route, and that changes look but not name
- visitor navigates to route, and route changes to userRoute, capitalizing things for instance
- user edits route, but not in a way that changes look, so you don't have to adjust that table



*/








/*
ttd february, those are going to be really useful and make these validations really easy:

raw box for name -> namePage, nameFormal, nameNormal
raw box for link -> nameFormal, nameNormal (user types in the second box)
choose or change your user name box, leading to page display, formal name that works in route, and normal name that is unique
"東京❤️女の子" namePage
"Tokyo-Girl" nameFormal
"tokyo-girl" nameNormal

post title, one line, can be blank

post or comment, multiple lines


validateName
validateRoute
validateTitle
validatePost



*/

//             _ _     _       _                                    
// __   ____ _| (_) __| | __ _| |_ ___   _ __   __ _ _ __ ___   ___ 
// \ \ / / _` | | |/ _` |/ _` | __/ _ \ | '_ \ / _` | '_ ` _ \ / _ \
//  \ V / (_| | | | (_| | (_| | ||  __/ | | | | (_| | | | | | |  __/
//   \_/ \__,_|_|_|\__,_|\__,_|\__\___| |_| |_|\__,_|_| |_| |_|\___|
//                                                                  














/*
these are all single line text boxes
with text based live feedback
and then validation, and different forms

[]password
[]email address
[]phone number
[]user name
[]user identifier user1234

email
phone
email or phone, the combination of those two
password


ttd february
*/


















/*
text validation happens here!
validate functions help the user as they type,
and also make sure

let v = validateSomething(s)//s is raw text the user just added or removed a keystroke from, or a string in a body an untrusted client just sent to us, trusted server-side code

v.isValid - true if what the user typed is valid or we could make it valid

v.formNormal - normalized to detect a duplicate
v.formFormal - use with apis
v.formPage

v.raw - echoing back to you exactly what you submitted, what the user typed
v.somethingElse - more properties can be in here specific to the validator


return 

*/


/*
ttd february

align these:
- email
- phone
- credit card
add these:
- user name
- date of birth


*/



/*
ttd february
ok, if your thinking from last summer on raw/adjusted/presented/normalized is good
can you do this with date of birth?
do these work with user names like "東京❤️女の子"/"Tokyo_Girl"/"tokyo_girl" which is page, working route, normalized route--that doesn't need to fit in here, but as a test of the flexibility and extensibility of the system, try it out
and align validatePhone and validateEmail, also

choose names so good it's easy to remember them
v
	.isValid

	.formNormal - minimized and normalized to detect a duplicate
	.formPage - form to use with routes and apis
	.formFormal - form to show on the page

	.raw - exactly what the user typed
	.(and more stuff in here that's specific to the validator or what we validated)

ok, so if that's good, look over code and write examples for credit cards, email addresses, phone numbers
and maybe also user names, dates of birth, that stuff



*/













//earlier draft and thinking and attempt:
//for use in the form, while typing, says if valid and suggests
export function typeUserName({pageRaw, routeRaw}) {//if they changed pageRaw, omit routeRaw; if they typed routeRaw, include both
	let pageName = pageRaw
	let routeName = routeRaw
	let lookName = routeName.toLowerCase()
	return {
		isValid: true,
		hint: 'type something',
		pageName,
		routeName,
		lookName,
	}
}
//for use on both sides of fetch, throws on a problem
export function checkUserName({pageName, routeName, lookName}) {
	if (!routeName) routeName = lookName; if (!pageName) pageName = routeName//earlier are optional
	/*
	lots to do here later, like
	pageName can't have double spaces or start or end with spaces--condensed must be the same as given
	routeName lowercased must be lookName
	those routes can have only letters, numbers, and -_.
	but also can't have any of -_. next to one another
	*/
	//minimal check for today's need:
	checkText(lookName)
}

export function checkUserRoute(s) { if (!validUserRoute(s)) toss('check', {s}) }
export function validUserRoute(s) {//check route text s, like "name-a"
	return (
		typeof s == 'string' && s.length >= 1 &&//string that's not blank
		s.length <= Limit.name &&//nor too long
		/^[a-z0-9._-]+$/.test(s) &&//only lowercase letters, numbers, and ._- allowed
		!(/[._-]{2}/.test(s))//but those three allowed characters can't appear together!
		//ttd january, maybe also can't have a period at the start or the end
		//and research what current popular platforms do--you haven't done enough research for this to design it properly
	)
}
test(() => {
	ok(validUserRoute('a'))
	ok(!validUserRoute('A'))
	ok(validUserRoute('user-a'))
	ok(!validUserRoute('user a'))
	ok(validUserRoute('_some.name_'))
	ok(!validUserRoute('some..name'))
	ok(!validUserRoute('some.-name'))
})












/*
here's a good first pinia task, maybe
have log output that shows in /log, and any page, as you click around, can add to
*/












//       _               _      _            _   
//   ___| |__   ___  ___| | __ | |_ _____  _| |_ 
//  / __| '_ \ / _ \/ __| |/ / | __/ _ \ \/ / __|
// | (__| | | |  __/ (__|   <  | ||  __/>  <| |_ 
//  \___|_| |_|\___|\___|_|\_\  \__\___/_/\_\\__|
//                                               

/*
ok, these should toss 'form'
also how do they deal with blank? and how should they?
*/

//toss if s is blank or has any characters that are not
export function checkNumerals(s) { if(!(/^[0-9]+$/.test(s)))           toss('data', {s}) }//unused
export function checkBase16(s)   { if(!(/^[0-9a-f]+$/.test(s)))        toss('data', {s}) }//unused
export function checkAlpha(s)    { if(!(/^[0-9A-Za-z]+$/.test(s)))     toss('data', {s}) }//unused
//export function checkName(s)     { if(!(/^[0-9A-Za-z.\-_]+$/.test(s))) toss('data', {s}) }

//return s with everything removed except
export function onlyNumerals(s) { return s.replace(/[^0-9]/g,           '') }//numerals 0-9 (used a lot)
export function onlyBase16(s)   { return s.replace(/[^0-9a-f]/g,        '') }//numerals 0-9 and letters a-f, for base16 (unused)
export function onlyAlpha(s)    { return s.replace(/[^0-9A-Za-z]/g,     '') }//0-9, A-Z, and a-z, for tags (unused)
//export function onlyName(s)     { return s.replace(/[^0-9a-zA-Z.\-_]/g, '') }//0-9, A-Z, a-z, and .-_, for screen names
test(() => {
	/*
	ok(onlyNumerals('0123456789') == '0123456789')
	ok(onlyNumerals('  012345\t6789\r\n') == '0123456789')

	let s = '\t0123456789 abcdef ghi ABC XYZ period ., hyphen -, underscore _ for names\r\n'
	ok(onlyNumerals(s) == '0123456789')
	ok(onlyBase16(s) == '0123456789abcdefededecefae')
	ok(onlyAlpha(s) == '0123456789abcdefghiABCXYZperiodhyphenunderscorefornames')
//	ok(onlyName(s) == '0123456789abcdefghiABCXYZperiod.hyphen-underscore_fornames')

	s = ' 0123456789 一二三 abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ .-_ 🌴? yes '
	ok(onlyBase16(s) == '0123456789abcdefe')
//	ok(onlyName(s) == '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.-_yes')
*/
})













//                             _   _ _   _      
//  ___  ___ _ __ __ _ _ __   | |_(_) |_| | ___ 
// / __|/ __| '__/ _` | '_ \  | __| | __| |/ _ \
// \__ \ (__| | | (_| | |_) | | |_| | |_| |  __/
// |___/\___|_|  \__,_| .__/   \__|_|\__|_|\___|
//                    |_|                       

/*
Blog titles can't be longer than 32 characters.
Post titles, notes and other short text messages are limited to 500 characters.

Other username length limits:    Other short post limits:
-----------------------------    ---------------------------
15 Twitter                       140 Twitter classic
20 Reddit                        280 Twitter
30 Gmail                         500 Mastodon, and our limit
32 Tumblr, and our limit
*/
const nameLimit = 32;
const noteLimit = 500;
//validate and correct or blank the given name text from the user, our settings.js, or settings.js from another installation
function validName(s) {
	if (badText(s)) return "";//no name yet
	s = onlySpaces(s);//turn all whitespace into _
	s = swap(s, " ", "_");

	s = onlyNameCharacters(s);//only allow 0-9 a-z A-Z and .-_
	while (has(s, "..")) s = swap(s, "..", ".");//no punctuation duplicates
	while (has(s, "--")) s = swap(s, "--", "-");
	while (has(s, "__")) s = swap(s, "__", "_");

	if (s.length > nameLimit) s = start(s, nameLimit);//32 characters or less
	while (starts(s, ".") || starts(s, "-") || starts(s, "_")) s = beyond(s, 1);//no punctuation on the ends
	while (ends(s, ".") || ends(s, "-") || ends(s, "_")) s = chop(s, 1);

	//return blank if that blanked it
	return s;
}
test(function() {
	ok(validName("title1") == "title1");
	ok(validName("My Title") == "My_Title");
	ok(validName("uh...no") == "uh.no");
	ok(validName("~.a.b.c.~") == "a.b.c");
	ok(validName("000009999900000999990000099999aaaa") == "000009999900000999990000099999aa");//34 shortened to 32
})
//validate and correct or blank the given text of a short note
function validNote(s) {
	if (badText(s)) return "";//no note yet
	s = gapsToSpace(s).trim();//turn all whitespace gaps into single spaces
	if (s.length > noteLimit) s = start(s, noteLimit);
	return s;
}

^just check that you've got the numbers from the comment, that research, reflected
and maybe move over some test cases into the new system, also














//                             _   _     _                 
//  ___  ___ _ __ __ _ _ __   | |_| |__ (_)_ __   __ _ ___ 
// / __|/ __| '__/ _` | '_ \  | __| '_ \| | '_ \ / _` / __|
// \__ \ (__| | | (_| | |_) | | |_| | | | | | | | (_| \__ \
// |___/\___|_|  \__,_| .__/   \__|_| |_|_|_| |_|\__, |___/
//                    |_|                        |___/     

// Say "0 items", "1 item", "2 items", and so on
function things(n, name) { return (n == 1) ? ("1 "+name) : (n+" "+name+"s"); }//no commas, for internationalization
function thingsCommas(n, name) {//with commas
	if (!name) name = "item";
	if (n == 0) return `0 ${name}s`;
	if (n == 1) return `1 ${name}`;
	return `${commas(n+"")} ${name}s`;
}
// Format numerals with thousands separator, like "1,234"
function commas(s, separator) {
	if (!separator) separator = ",";
	var t = "";
	while (s.length > 3) { // Move commas and groups of 3 characters from s to t
		t = separator + end(s, 3) + t;
		s = chop(s, 3);
	}
	return s + t; // Move the leading group of up to 3 characters
}
test(function() {
	ok(things(0, "boat") == "0 boats");
	ok(things(1, "boat") == "1 boat");
	ok(things(2, "boat") == "2 boats");
	ok(things(2000, "boat") == "2000 boats");



	ok(thingsCommas(0, "muffin") == "0 muffins");
	ok(thingsCommas(1, "muffin") == "1 muffin");
	ok(thingsCommas(2, "muffin") == "2 muffins");
	ok(thingsCommas(3000, "cookie") == "3,000 cookies");

	ok(commas("12") == "12");
	ok(commas("12345") == "12,345");
});

exporty({things, thingsCommas, commas});


^this is all deletable, but you can try out the tests, maybe


















//scrap notes; you do have a working deindent in level0, you just realized

/*
deindent
the first line will be blank
the second line, the whitespace that starts it, must be removed from later lines
actually just remove tabs, spaces after tabs stay, spaces stay
later lines, that number of spaces, remove them
the last line will be just whitespace, omit it
*/

//                                                       _       
//  ___  ___ _ __ __ _ _ __    _ __ ___   __ _ _ __ __ _(_)_ __  
// / __|/ __| '__/ _` | '_ \  | '_ ` _ \ / _` | '__/ _` | | '_ \ 
// \__ \ (__| | | (_| | |_) | | | | | | | (_| | | | (_| | | | | |
// |___/\___|_|  \__,_| .__/  |_| |_| |_|\__,_|_|  \__, |_|_| |_|
//                    |_|                          |___/         

//given a multiline string with blank first and last lines, and a whitespace margin before each line, remove that margin
//returns s unchanged if anything doesn't look right
function margin(s) {
	var l = stringToLines(s);
	if (!l.length) return s;//no lines
	if (hasText(l[0]) || hasText(l[l.length - 1])) return s;//edge text
	if (!(starts(l[1], " ") || starts(l[1], "\t"))) return s;//first line must start with space or tab

	var f = l[1];//first line
	var w = start(f, 1);//tab or space character
	var n = 0;//number of those at the start of the first line
	for (var i = 0; i < f.length; i++) { if (f[i] == w) n++; else break; }
	if (!n) return s;

	var a = [];//array to fill and return
	for (var i = 1; i < l.length - 1; i++) {//loop through lines not including blank first and last
		var line = l[i];
		if (hasText(line)) {
			if (line.length < n) return s;//line too short
			for (var j = 0; j < n; j++) { if (line[j] != w) return s; }//line doesn't start with w characters
			a.push(beyond(line, n));
		} else {
			a.push(line);
		}
	}
	return linesToString(a);
}
exporty({margin});







function linesLength_draft(a) {
	let l = 0

	//total up all the lines
	//doesn't include newlines, 

	//ok, on the page these will become p; in the database separate by \n, i guess?
	//ttd february

	//maybe lines above returns an object with the array, text with \n, and length and size already all in there; yeah
}








export const Limit = Object.freeze({

	//program types
	tag: 21,//tags are exactly 21 characters, like "JhpmKdxqPtxv6zXZWglBL"
	hash: 52,//a sha256 hash value in base32 without padding is exactly 52 characters, like "FTZE3OS7WCRQ4JXIHMVMLOPCTYNRMHS4D6TUEXTTAQZWFE4LTASA"

	//user submission limits
	name: 42,//user names and route slugs, super sized from twitter 15, 20 reddit, 30 gmail, and 32 tumblr
	title: 280,//from 𝕏 née Twitter
	post: 2200,//for posts and comments, from instagram and tiktok

	//html form field limits
	input: 512,//higher ceiling for single line form fields
	area: 10000,//and for text areas, from twitter DMs and reddit posts
})





//ttd february, you need to add maximum length truncation and checks to these. actually set limits in the page, and enforce them here--if somehow text makes it down that's over that limit, you don't have to truncate, just isValid false
/*
no, just have these truncate
and then also set the same limits in the page so the page stops accepting keystrokes

how long is the declaration of independence?
see what this is like, experience-wise, on the page
*/
































fin








