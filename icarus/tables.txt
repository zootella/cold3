
















/*
our tables do everthing with just a small handful of postgres types,
and our conventions for column titles identify what kind of data columns have:

example2_table            table names end _table, lowercase and numerals ok

row_tag         CHAR(21)  a globally unique tag to identify this row
row_tick        BIGNUM    set when we added the row
hide            BIGNUM    0 to start, nonzero to ignore this row in regular use
                          ^ most tables start with these three columns

password_hash   CHAR(52)  52 characters of a sha256 hash value encoded to base32
user_name_text  TEXT      text which can be blank or long

_tag, _hash, and _text are strings; everything else must be an integer
a column which can be a tag or blank is _text
as is a column which can be text or numerals, like settings_table

PRIMARY KEY is frequently row_tag, which is guaranteed to have unique tags,
even though we never query on it
every column is NOT NULL to make things simpler, generally and for .upsert()
*/

/*
to this add:
using indices, and multicolumn indices, to match common queries and makek them fast
not using foreign keys, which establish constraints between tables, and don't help performance
*/



here are the things we're accpeting:
a call to supabase takes ~100ms, some queries may have a handful of them, and we accept this can make some things the user clicks on take nearly a second to complete, a noticable delay



here are the assumptions we're making
the supabase api and workers' connections to supabase will be reliable, and the supabase api is error-free. we assume that if a call succeeds, it did what it said it would, without checking
if neighboring lines in a worker make two edits to the database, there won't be a change to the database between them
if information in the database enters an unexpected, should-be-impossible state, code is conservative enough that this won't break the app, and later changes could heal the data

essentially, i've found it's not possible to code with the database to the same level of perfection as dealing with other parts of the system
to be able to move forward, a level of trust


















/*
-- records of browsers signing in with password and signing out
CREATE TABLE access_table (
	row_tag      CHAR(21)  PRIMARY KEY  NOT NULL, -- row tag
	row_tick     BIGINT                 NOT NULL, -- when inserted
	browser_tag  CHAR(21)               NOT NULL, -- browser tag
	signed_in    BIGINT                 NOT NULL  -- 0 signed out or 1 signed in
);
-- composite index to make a filtering by browser tag and sorting by tick fast
CREATE INDEX access_index_on_browser_tick ON access_table (browser_tag, row_tick);
*/







/*
facts about postgres and choices about how we're using it:
we're using BIGINT for every integer, for simplicity, even if we only plan on storing 0 or 1
indices make queries much faster, and compound indices that match queries are a good idea
*/




we're intentionally avoiding date, duration, and uuid types
ARRAY and JSON are common; maybe you'll use those, or maybe you'll instead accomplish array-like data with simple tables with multiple rows

-also "While PostgreSQL’s query planner is quite sophisticated and can optimize queries using existing indexes, it won’t create new indexes on its own based on query usage."

other supabase things we're not using:
auto incrementing row number, BIGSERIAL
Type: "timestamptz" (timestamp with time zone)
supabase's clock, we always use now from the worker



in excel and on a piece of paper, the rows have an order, but this isn't the case in postgres
^put in section about what you've learned about databases in general
the columns do have an order, but since column titles must be unique, we can ignore it
and exchanging objects like {title1: 101, title2: 202} back and forth with the supabase api, order doesn't matter



/*
make sure postgresql has the default utf-8 character encoding with a sql statement like this:

SELECT pg_encoding_to_char(encoding) AS encoding
FROM pg_database
WHERE datname = current_database()

ran this in supabase's sql editor, and the result is "UTF8"
*/


supabase is full of darkpatterns to turn on row level security
because that's how they get you
turning off rls is fine, and common when server code has exclusive access to the database















/*
long chat about transactions that ended up with this

const sql = `
	BEGIN;
	INSERT INTO first_table (column) VALUES (quote_literal(${val1}));
	INSERT INTO second_table (column) VALUES (quote_literal(${val2}));
	COMMIT;
`
const { data, error } = await supabase.rpc('execute_sql', { sql })

imagine the database only makes sense when both, or neither of these rows are added
if one row is added, and the other one not there, the database isn't in a consistent state

also, imagine the first row inserts fine, but then
a valid error correctly prevents the second row from being inserted
there could be a uniqueness conflict on the second row, for instance

using the supabase api, each insert is a separate statement
js code will have to notice the error on the second insert
and then go back and try to remove the first

but this problem was solved in databases decades ago!
with somethign called the transaction
the begin and commit lines above group the two inserts into a single transaction
and, sure enough, if there's a problem anywhere in there, none of it sticks
and all of this is automatic

so you want to be able to use transactions
the problem is, the supabase api doesn't include them
there isn't a way to do two inserts in a single call to the supabase api, either
even with all the method chaining

so the plan is to
use the supabase api for reads
and individual writes
but when you need to insert multiple rows all at once
to drop down to raw sql and execute a block like above

but now you need to worry about the infamous sql injection attack
but maybe it's not too hard
you think essentially you just have to validate the inserts really well
and your own functions are doing this

but additionally, get protection from using knex, continued below
(that didn't work because they all assume api or node, rerouting)

also, batch raw inserts like this also will likely be faster,
as each trip to supabase is taking ~150ms
*/






/*
here's a crazy idea
your database design means that you're, at the start, going to have to get all the rows for a browser tag from maybe a half dozen different tables
then, with all those rows in the worker, you'll synthesize and decide what to do next
rather than most databases, which have requirements and a single users table, for instance

ok, so let's say that even the most trivial supabase call takes 100ms
so if you do 10 of them, that's a full second!
which is not acceptable, of course

but then you just realized, do multiple async calls in parallel in this case
yeah, how does that work in this fully finished time of async await
*/



/*
some of these ideas may be known inventions, others discredited antipatterns

every row has a tick and a tag
code never deletes a row, rather, it adds a new one later which invalidates it
or marks a cell on the row as deleted--the column name for this is standard

instead of having a table for phone numbers and a table for email addresses,
and then doing long joins from users to each,
what if we had two columns in an existing table
the first tells the type of the contents of the second, like "Email." or "Phone."
and then the second has text with the value in the correct form for that type

so then if you just want all the email address in the database
instead of looking at one entire special email table
you filter the unified omnitable by "Email."

this is starting to be a little more like a document database
but could be simple enough, and will hugely reduce the number of tables that are in there
when you add a new data type, you don't have to create a new table for it
*/


hide, 0 by default, then nonzero to hide the row, perhaps because it's made not relevant by later rows, like the user deleted it, or edited it, or it's no longer necessary to come to the same conclusion
hidden rows should never never be sent to the client, for any reason--it's ok for the server to look at them and make decisions based upon them, though
but even that should be rare--when performing an audit for a staff member, or something related to keeping the system secure as it runs



imagining how this might grow
_json, and postgres has a type for this, and if you use it a lot you sorta go into document database land, you've heard. not sure if you want to go there, but there might be a way to go there


another thing we're not doing
labeling any columns UNIQUE in the schema
tags are globally unique
and row_tag column is unique
but other columns that have tags absolutely have duplicates! multiple rows need to record facts about the same tag, like browser tag or user tag!
unique makes postgres autoatically make an index
but we're adding compound indices designed to match common queries by design
so we don't need more individual indices


yes make indices
no don't use foreign keys, they don't help with query speed

row_tag
row_tick
hide         -- initialize to zero to not hide, nonzero numbers indicate why its hidden











^from early notes, for net23.txt





supabase
[]backup and download
[]restore into local postgres
[]restore into supabase
[]setup automatic backups every 6 hours
[]that go to an amazon bucket











hit_table


/*
where the info comes from

//worker's clock
		row_tick: t,
		quarter_day: d,//cells that describe the first hit like this in this quarter day time period

//cloudflare, trusted
		ip_text: ip,
		city_text: city,

//browser, what it says it is
		browser_tag: browserTag,
		agent_text: agent,
		graphics_text: graphics

//determined from several sources
		user_tag_text: userTag,




parse these out in doorWorkerOpen, probably
workerEvent.req.headers.get('CF-Connecting-IP')
const userIp = request.headers.get("cf-connecting-ip");
ask: what kind of object is headers? what is the .get method? should i use upper or lower case here?
Because CF-Connecting-IP is added by Cloudflare’s edge, it is considered trusted. It tells you the actual IP (IPv4 or IPv6) Cloudflare sees from the client, regardless of any untrusted X-Forwarded-For or other headers the browser might send.


const cf = workerEvent.req.cf;
const city = cf?.city;         // e.g. "New York"
const region = cf?.region;     // e.g. "NY"
const country = cf?.country;   // e.g. "US"
const continent = cf?.continent; // e.g. "NA"

make sure geolocation is enabled


const cfInfo = request.cf; 
cfInfo might look like:
{
  asOrganization: "AS12345 Some ISP",
  city: "Los Angeles",
  region: "CA",
  country: "US",
  continent: "NA",
  postalCode: "90001",
  latitude: "34.0522",
  longitude: "-118.2437",
  timezone: "America/Los_Angeles",
  // ... and so on
}

request.headers.get("user-agent")


also you should only register hits onCloud()


json stringify cfInfo to see what they look like in supabase
and similarly, this is a good way to use

now code some pinia
pinia 1[]the local counter that stays when you go back to the route it's on, all local
pinia 3[]graphics info, setting once at the start


maybe actually store it parsed, not raw
because you don't want to reparse it differently later
raw is big, and not private


don't do the nvidia stuff because it isn't already on the worker
save the whole cfInfo stringified









*/










































demo
so far in the database

i've been coding for years, but am totally new to databases!
ive never written a schema before

no jwt - a format for a format, and expiration
no orm - instead just functions that look at grids of text and numbers

example_table and a demonstration of types
column title defines type for sanity checking

strategy
keep things simple and verbose in the database
keep things really simple in the browser
handfuls of quick queries in the worker bring it together

tables are ledgers; we append to them
instead of deleting a row, mark it as hidden




























don't build wide at this level at thi stime
rather, sketch out what you'll need for the next list of things, like:
attestation - this user has proven they control this address, different forms
governor - the system messaged this address hash this long ago, this many times
browser - this user tag is signed in with these browser tags
code - the we texted you this many numbers
and then the other functions which you may need in the future, list those here in a brief comment, but don't code them

how does sign-in work, separate 

how dose code work, separate 


database tables:
1 hold simple, atomic facts (rather than the results of logic examining those facts)
	example: one row for sent code, another row for entered code
2 are a ledger that grows, rather than changes
	example: one row for added email, another later timestamped row for removed email
3 hold different kinds of data in a column (rather than having different tables for data)
	example: one table for every way to sign in, that grows as we add new sign-in methods (rather than JOINs between tables about email, sms, x, metamask, etc.)

first, sketch out on paper what the user does and what the system does through valid flows

a user, already signed in, returns to the site

an attacker enters a victims email address many times to get the victim to be sent codes they don't need

a user signes up with email
and then validates that email address

a user, already signed in, 

an anonymous user sets their nickname, and stars something

a signed-in user authenticates with another factor to perform a protected action, like changing sign in
these permissions only extend to their current device
an hour later, their permission level on that device returns to normal

a new user gets codes to validate their email address adn then sms number
the second code they get is code B
the third code they get is 6 digits, not 4

a user signs in on desktop
then on mobile
returns later and is still signed in
then signs out of everywhere on desktop
(what table links a user tag to their browser tags?)
(when does a user get a user tag? how does this work with anonymous users following a feed and renaming themselves?)
(what happens when an anonymous user with data signs up or signs in? this is the cart combined problem)

an anonymous user navigates to the site
their browser gets a browser tag, which is set once, and never changes
the anonymous user stars a feed and sets a nickname, but does not sign up or sign in
it's a shared computer. another user navigates to the site and signs in
they use their account
they sign out
the browser goes back to showing the nicnmake of the anonymous user
a second user signs in
they user their account
they sign out
back to anon user
that anon user signs up
their stars and nickname carry into their new account

a signed in user visits a page that shows them
where they are currently signed in
where they have previously been signed in
with information from the browser's reported query string and geolocation, like city and country



user_address_table

user_browser_table

governor_table
the purpose of governor table is to 

short_code_table

attestation - this user has proven they control this address, different forms
governor - the system messaged this address hash this long ago, this many times
browser - this user tag is signed in with these browser tags
code - the we texted you this many numbers




first, just think about how the short code table works
even before you do the lettered and length variations--imagine all the codes are 6 digits long and random
how does it work that the user has to type it into the same





what prevents a user who has just gotten a 1234 code from trying 10,000 times for guaranteed entry?
turnstile will slow them down
the code will only last 20 minutes
should you also put a governor on trying answers for that code (on a hash of the codeTag in the page)?







== user identity 0.01

imagine this subset
no anonymous users
no email or sms or anything else
it's a user name, and a password
under the hood, there's a browser tag, and a user tag
users can sign up, sign in, sign out
users can delete their account, even--another user can sign up with that name
users can change their user name, their user tag does not change
two different users can share a computer

and a user has a page,
where there is a counter they can change
and a message they can change
(oh, their page also has a card:)

and if they are signed in, it shows where they are signed in
and where they used to be signed in, also
with just this, you can code the list that shows where the user is signed in,
and where they have been signed in

yeah, that's a good user identity 0.01
and also will show you
and then after that, add email
and by adding email successfully, you enable multifactor within the same schema
and email also includes one time codes
and forgot password, that flow

and after that, add sms
which is like another kind of email
and also has forgot password, validate, one time codes, code expiration, rate limiting
lots of advanced stuff

this is your current idea of how you get started with user identity
(1) password, demonstrating linking browserTag and userTag
(2) email, demonstrating one time code validation and forgot password and more
(3) sms, as an alternative additional method to email that you can add without much additional code or schema
















every code could be 4 digits, you now realize
a code only lives 20 minutes or 4 guesses, whichever happens first
it's tied to the browser hash, so a code stealer can't use it
import interactions are authenticated with a strong second factor, anyway

you're not sure how to do code B, code C, so on
because are those specific to the email?
or the browser?
but this might make things harder for the user

what if instead it's six digits and the first two are given
your code is 12-3456
and prepopulated in the box is 12-
or lowercase letters, and then they're before the box

ui7855
gx7588
and it's clear you can' ttype the letters because they're already there and the box is number only
yeah, maybe this is a good design

what if it's a single letter, omitting l and o and g

Your code is v9622 from cold3
and then the box shows the v within the box, but it's fancy css
yeah, this is better design for the user and for implementation

Code H [1234]
Your code H is 1234 from cold3. Don't share it with anyone--they could steal your whole account!





/*
[]rename to like:

[]queryDeleteRow - delete one row if it meets the specified criteria
[]queryDeleteRows - delete all rows that meet the specified criteria
[]querySetCell - change an existing cell to a new value
[x]queryAddRows - add several at once
[x]queryAddRow - add just one of them; these do all the checks first before leading to the same helper
[]queryCountRows - return the number of rows that meet specified criteria
[]queryGetRows - get all of them, sorted
[]queryGetPage - just the desired number, sorted by given title, have limit and offset
[]queryGetSingleRow - use when you know there's zero or one
[]queryGetRecentRow - use when there could be many


[]queryAddRow – Insert a single new row.
[]queryAddRows – Insert multiple new rows in bulk.
[]querySetCell – Update a single column in exactly one row.
[]querySetCells - update all the cells in a column, like setting their hide to 1
[]queryUpdateRow – Update multiple columns in exactly one row.
[]queryUpdateRows – Update one or more columns across all matching rows.
[]queryDeleteRow – Delete exactly one row matching specified criteria.
[]queryDeleteRows – Delete all rows matching specified criteria.
[]queryCountRows – Return the number of rows matching a condition.
[]queryGetRows – Retrieve all matching rows, possibly filtered, sorted.
[]queryGetNRows – Retrieve a limited set of matching rows, sorted.
[]queryGetSingleRow – Retrieve a unique row (or none) matching some condition.
[]queryGetRecentRow – Retrieve the most recent row (or a small set), usually by a time/tick column.
[]queryExists – Return a boolean indicating if any row matches a given condition. (Optional but common)

do not try to build out a complete set, there are two many permutations with a single table
and later when you're doing JOINs the permutations will go geometric
instead, all of these functions are table-agnostic
but made quite bespoke to an application use above in level3
if there's an obvious neighboring use, sure, include it
yeah, that's fine


you'll need a page, database test
and three buttons, Populate, Query, and Clear
yeah, this is a good idea, but don't spend more than a day on it


delete all the rows older than something
invalidate all the rows older than something by changing their hide to 2 or something


[]make it so snippet doesn't run adn doesn't render cloud; this is only local


*/




is this going slow because you don't have automated tests?
remember that you could code some up in example_table





here's how you figur eout the simple universal and correct way to link browser tags and user tags
make user sign up and sign in with password, only
have a message the user can see, themselves
let both anonymous users and signed-in useres see their message
do you need users to pick unique user names to do this? you think so, and that's fine




































/* level 3 query */

settingReadInt, settingRead, settingWrite,
browserSignedInSet, browserSignedInGet,

/* level 2 query */

snippetClear,
snippetPopulate,
snippetQuery,

queryFilterSortTop,
queryFilterSortAll,

querySetCell,
querySetCellOrAddRow,

queryGetCell,
queryGetCellOrAddRow,

queryGetRow,
queryGetRowOrAddRow,

queryAddRow,
queryAddRows,

queryCountRows,
queryCountAllRows,
queryDeleteAllRows,












plan out on paper how username and password-based sign up works

sign up
sign in
delete account

browser tag
user tag

user name

a user has a page and a message they can set
other users can see this page, but only the user can change it
you can change your password, but there's no forgot yet

a user's page has a card, which shows their name and when they signed up

a user's page can also have a list of where they're signed in

so from that, tables will probably be
user_password_table - says when p
user_access_table

there is a lot here, actually, even with only one way to sign in (name+password)
you'll figure out how browser tag and user tag are related
how sign out signs out everywhere
how pinia? holds the signed-in status, although you might check it every time in the database anyway






ok, real simple, on paper
imagine a user is already signed in
they have browserTag and userTag assigned
a worker gets a request from a page,
and the page tells the user that they are signed in, and what their userTag is
what is the database table that contains that information

row_tag  row_tick  hide  user_tag  browser_tag  signed_in

row tag, tick, hide are all just standard
user_tag of the user, browser_tag of the browser, signed_in 1 true means that the user is signed in there
browser_tag of the browser and signed_in 0 false means the user is signed out there, and everywhere else, too

so the worker, given a browser tag, wants to determine which user is signed in here
it filters on browser tag, looking at rows in descending order
there could be different users in that row set, of course

so now the worker is looking at a list, most recent first, of:

user_tag  signed_in
<meaningful>

no rows for this browser tag; nobody is signed in

user_tag  signed_in
alice     1 <--meaningful

only a single user has ever used this browser, and she's still signed in

user_tag  signed_in
alice     1 <--meaningful
alice     0
alice     1

here, just alice is using this browser, signed in, out, then in again
alice is signed in here

user_tag  signed_in
alice     0 <--meaningful
alice     1

nobody is signed in, alice has previously signed in, but signed out
this is good, that we still have data of what happened in the past here, because if alice signed up with method X, the sign in form can preference or hint at method X

user_tag  signed_in
bob       1 <--meaningful
alice     0
alice     1

after alice signed in and then out, bob signed in. bob is signed in here

user_tag  signed_in
alice     1 <--meaningful
bob       0
bob       1
alice     0
alice     1

alice signs in and out, bob signs in and out, then alice signs in


ok, so keeping with the simplification that a sign out signs out everywhere
looking at this, filtered for one browser, you will run into useres who look signed in here, but somewhere else, they signed out
you almost need a separate table of sign-outs:

sign_out_table
row_tick user_tag

so this is just the list of times when alice or bob last signed out
so here's how you use those?
you look at the sign-in table for this browser, to get the users who are currently signed in here
then you go to the signed out table to invalidate sign ins for alice that are older than her most recent sign out
wow, that's already a quite complex query

you just realized when you're doing the super authentication that only lasts 1 hour, or wahtever, and only exists on one browser, you can do that like this:

user_tag  signed_in
alice     2 <--meaningful
alice     1

assuming that the time now is within an hour of the 2 row

ok, back to one table
here's how the "who is signed in here?" worker figures that out
filter to just rows about this browser tag
from that, get all the users who have done something with this browser here

now you have a list of users
you go back to the table and pull all the rows about all of those users

user_tag  signed_in  browser_tag
alice     1          here
alice     1          elsewhere
bob       0          elsewhere
bob       1          here

users who are most recently signed in 0 you exclude--it doesn't matter whether they signed out here or elsewhere--they can sign in again

user_tag  signed_in  browser_tag
alice     1          here
alice     1          elsewhere

what if there's a separate table of user tag, and when they last signed out
so from the first table, you look at who's signed in here
that is, browser tag is here, signed in is >0, you get a list of users
you go down that list most recent to earlier, looking user by user at sign-outs in the other table. the first one you find who's signe din here and not signed out after that, is signed in here

ok, so that's pretty not simple, and you have hopeful doubt, rather than confidence, about its workign and ramifications

assuming private devices, it's also acceptably low number of round trips
but omg, you can't do this simple first thing with one query?!

here it is again, one table, a series of queries
pull all the rows about this browser tag and sign-ins
from that, you have a list of users who are or have ever signed in here

then do the second query--all sign out records of all of those users, everywhere
now you're piecing through that in the worker, i guess?
you go user by user, in order of signed in here
and then look at that user's most recent sign out, anywhere
the first signed in here user who doesn't have a more recent signed out, anywhere, is signed in here








what if the ledger design is a mistake?
what if instead, you should keep an actual unqueryable but free to blather ledger
and do things in the database by editing
like a normal DBA

(or, you actually use the row invalidation thing) <--trying this method today
(or, you have both--a table that gets edited, to be fast and final, and alongside those, tables that are logs essentially, which you use to infer things and audit things--they can grow big and slow)

ok, what's that look like
there's a table that maps browser tag to user who is signed in here
there can only be one browser tag, so there's only one user who can be signed in
when a user signs out, we have to find all the browser tag rows where they are signed in, and sign them out of all of those
this is a bigger operation than just adding a new row to create a command and record to sign out





what if you hide rows as you go

othe ridea is to limit the number of places a user can sign in

but you're feeling better about this design now, though

user_browser_table - tells where users are signed in to what browsers
user_identification_table - tells how users prove they are who they say they are, with email, sms, metamask, two factor app codes, all that

also, let's design assuming two things
-supabase api always works
-two or more supabase commands do complete as a transaction (there isn't the same user writing a similar thing at the same time)
at this point, those assumptions are necessarily, essentially, to be able to move forward





browser_table







user_stage_table
user_tag
stage

records a user's lifecycle
0 does not actually exist in this table or anywhere else, reserved
1 new anonymous user we're letting leave traces, but who has not signed up yet
2 regular signed up user in good standing
3 account hidden, could be unhidden
4 account closed
notice how permissions (creator, staff) are reflected elsewhere
notice how reason for deleting (banned, user left) are also not reflected here



user_name_table
user_tag
name_text - user name rendered, as on a page
route_text - user name as in a route, all lowercase

links page user name, route user name, and user tag
records changes to those in ledger format


you just realized that in these two, changes are rare
so you can query the most recent row
adn don't have to worry about hiding previous rows
this is actually a lot easier a task than browser_table!


















