



[I] what are the high level functions on top of this?

q1. im a browser with browser tag, what user if any is here? provisional, actual, or super
{<same browserTag>, userTag, 1+ level} = await browserToUser({browserTag})

c1. sign this user out everywhere right now!
await signOut({userTag, browserTag})

c2. the human here has entered information we should remember. they're not an actual user yet. make them a user tag to record that they were here, so they can pick up where they left off, maybe immediately, maybe in days
{<same browserTag>, userTag, level=1provisional} = await createUser({browserTag})

c3. the human here as proven they're this user with this user tag. sign them in here
c4. the human here has finished signing up, using this previously provisional user tag. sign them in here
await signInUser({browserTag, userTag})

[II] and then there's the middle part you're also figuring out

???

[III] which calls down to a table that you're pretty sure now looks like this

row_tag | row_tick | hide | browser_tag | user_tag | level
^the three starting ones
                            laptop        alice      0 signed out, but this row will immediately be hidden
                                                     1 provisional user signing up or customizing
                                                     2 normal actual signed in user
                                                     3 sudo, just for one hour, and just here








~ UserInformationComponent
browser tag: "CnsWynLDKPgorrBcwEQLi"//exactly identifies browser, never changes
user tag: "07bnKpPvsq56NKKAIqtri"//exactly identifies user, never changes
page name: "2 Rainbows ðŸŒˆðŸŒˆ 4U"//user's current name as it shows up on pages and cards
formal name: "Rainbows-4U"//canonical working route, and 301 redirect destionation
normal name: "rainbows-4u"//normalized reserved route, unique, also a working route

~ UserInvitationComponent
[Sign Up] [Sign In]

~ UserIntakeComponent
Welcome new person! Sign up is easy; just choose a name for yourself.
[   ]name [Check Availability] <--sets all three for simplicity
[Sign Up]

~ UserAuthenticateComponent (which doesn't actually do any authentication yet!)
Welcome back! State your name to re-enter; we trust everyone at this point.
[   ]normal or formal name
[Sign In]

~ UserRenameComponent
You can edit your name as it appears on pages, cards, and links.
[   ]page name
[   ]formal name
[Check Availability] [Change Name]

~ UserExitComponent
[Sign Out] [Permanently Close Account] <--ooh!






for permaclose, you could do a confirmation time, like 1-2min from first click for testing
and then after you test that you set it to 24 hours

also, imagine much later the user wants to change their name, but have a redirect from the old name to the new one, how would you do that?
that's a reasonable feature request
and also quite hairy in the table, you now realize!






make browser_table really simple to think about (it's not yet)
a browser visits for the first time; they get a browser tag
the person enters the first bit of information; they get a user tag, this user tag isn't signed up yet, it's provisional
the person provides more information, finishes signing up--pretty sure browser_table doesn't care about that




[]see "Taken." get reported back up to the user
[]deal with an exception here telling the page 500--catch those in the page
[]understand where you check what up and down the stack
[]improve the form so you can show it to friends, like gray the buttons until they've entered text for user name that is an acceptable route; very minimal

and then what's next? maybe status message in a new table,
which the user, once signed in, can edit--new component for this
and then user page at a route that holds that message
and that's where you figure out how to get nuxt to do mixed root routes, which hopefully is common and easy









//ttd january []confirm that an exception here causes throws up all the way back to the page
//[]and hits datadog
//and then deal with exceptions in the page














lots of states, permissions, roles, and life cycle-stages to think about:

most fundamental level:
- create (happens when user signing up provides first bit of information)
- identify
- delete (happens when user or staff bans)

slightly higher level on top of that:
- provisional (clicked follow) or signed up (has password)
- suspended (by staff)
- hidden (by user)

that kind of stuff, and then also, permissions:
- provisional
- normal
- staff

those categories and enumerations, and also, roles:
- creator
- just a fan

and more?! lots ot figure out here as we go from ameoba-stage to small multicelled organism





imagine you let a user delete their account, but as a precaution, they have to click delete once, then come back between 24-48h later, and click delete again
you just realized you can do all that with trail_table!

also, you realized you do not need to expire or delete trail table rows
because the index that ends row_tick DESC's btree will already make it super fast to ignore rows older than the given since time 






maybe there's a level4 - high level application logic
like teh code that calls down to the level3 functions that are specific to a table, but deal with tables at an application-specific, but still quite granular, level
level4 could also just be informal level3 overflow, not strict rules like the lower levels
make level4 whenever if level3 is getting too big






from the "you are who you say you are" user attestation system:
pretty cool you've separated this concern even from password
and after this you'll work on (a)hide and (b)delete account
and also (c)anonymous users who get started leaving data before they sign up
this seedling is enough to get those three powerful features right


















some tables have functions that only work on them, these are exported
others only make sense with higher level functions that cover more than one table
for these, you're using snake_case, and they are *not* exported
well, this pattern is good, but fits more easily with some tables rather than others
you're keeping it, but not sticking to it 100%



















