





figured this out, maybe
a common happy and lazy path

decisions:
- don't have passwords at all, because (1) users aren't capable of them, and just recently, (2) your browser and your device both clamor to choose and trap yours in a passkey system (essentially, the recent WebAuthn/CTAP/FIDO2 standard is allowing a google v apple battle of the titans, and users are left helpless in the middle)
- don't force a new person to find the code, they might not choose too, theh code might actually not successfully reach them

day 1
new person navigates browser to site
browser chooses browser tag
person enters address
server assigns user tag, and sends code to address
page shows code enter box at the top, but also renders inside for that user below; person ignores code enter box

day 2
person returns to site in same browser
site is signed in, person has browser tag and user tag
page notices unverified address, puts up box to send a new code; person ignores it

day 3
person navigates new device to site
clicks sign in (or maybe sign up or sign in?! :)
enters same address (does not require additional matching information, like dob beforehand)
now, finding the code is required! and when the user does this, there are two positive outcomes:
- they've validated the address
- they're signed in on the new device (as well as, still, the first device)






more notes on happy lazy path
to do the above, you don't need a provisional user level
the first browser to challenge a never before seen address gets:
- a new user tag made
- that user tag is signed into that browser (fully, without expiration)
- the user tag in address_table has Challenged. that address (and code sent which user ignores, in this scenario)
then, the person goes to the second device, and enters the same address
now, they have to verify to be able to use the site (make sure this doesn't put the site into an unusable state, there's a stop trying to sign in button sorta like sign out, or something)



thoughts about provisional users
a person at a browser not signed in follows a creator
ok, so now we save that follow, in a way that if a week later, the same browser returns, it's still there
and we do this without forcing the user to complete a standard full sign up process
the way this works is, we make them a new user tag right when they enter the first information
the way this isn't confusing is: the only way to bring that information into a durable account is to complete a new sign up process on that browser
if, instead, they sign in as a different existing user, there is no merge, that account they just signed in as loads at that browser, and that account has its own follows, and so on, which is fine
you haven't fully figured this all out, but you are confident that the solution you find will grow from what you wrote here now












you are ready to code name-based sign up and sign in
which will use real tables and functions
even though it has the following simplifications
- all users have routes
- users identify themselves by their route
- "you are who you say you are" user validation for sign-in

from this first strand, though, you can code these features
[]a user has a status message
[]a user can change their status message, others can only view it
[]a user has a card that shows their status message
and you'll be able to code
[]a user hides and unhides themselves
[]a user closes their account












./site/stores/helloStore.js
  v
./site/server/api/hello1.js > demonstrationSignHello
./site/server/api/hello2.js > demonstrationSignGet

./site/components/AuthenticateComponent.vue
./site/server/api/authenticate.js
  v
demonstrationSignGet
demonstrationSignUp
demonstrationSignIn
demonstrationSignOut

./icarus/level3.js

demonstrationSignHello > browser_get
demonstrationSignGet   > browser_get, name_get
demonstrationSignUp    >              name_get, name_set, browser_in
demonstrationSignIn    >              name_get,           browser_in
demonstrationSignOut   > demonstrationSignGet,                        browser_out

browser_get
browser_in
browser_out
TABLE browser_table (browser_tag, user_tag, level);

name_get
name_set
name_delete
TABLE name_table (user_tag, normal_text, formal_text, page_text);













uses of checkName
choose or change name
- changed contents of first box
- changed contents of second box
- ok to submit or submitted based on both boxes, on the page
- same thing as that, on the server
demonstration sign up
- typed in sign up box, forgiving
demonstration sign in
- typed in sign in box, forgiving
get to route
- GET to route, decide to 302 or 404 or 200







that's the schema, now here are the functions
a GET request has come in--do we have a user by that name? is the case correct, or should we redirect?
a user is trying to take a name--is it unique for them to take?
 
other user stuff, like status, avatar, goes in profile_table
but we do keep the user's name on the page here
because it's closely related to their route
and because we also want to enforce uniqueness there--we can't let two users both call themseves Tokyo❤️Girl, for instance











wait--how does it work with other sites for users who are too lazy to find and enter a code
do they make this work by matching an unverified email with a correct password?

slightly lazy, somewhat fat-fingered, but not malicious user,
on a simple, common, and happy path

navigates new browser to site for the first time
enteres email
is in(?)
(never completes email code verification flow)

next day, picks up second device
navigates to site
(chooses sign in? sign up again?)
enters the same email
(are they given access to the account they made on device one?)

your question at this point is not how should you design this
but rather to observe how other sites deal with this flow

but now also thinking through this
maybe sites solve this by adding a password
and you could solve it by putting dob before email, those two are good enough for a basic user: dob, address, even if unverified
(later) realized you solve this by requiring the person to enter the code on the second device
and once they do, they're fully signed up, and signed in on both devices








































