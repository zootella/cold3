



you are ready to code name-based sign up and sign in
which will use real tables and functions
even though it has the following simplifications
- all users have routes
- users identify themselves by their route
- "you are who you say you are" user validation for sign-in

from this first strand, though, you can code these features
[]a user has a status message
[]a user can change their status message, others can only view it
[]a user has a card that shows their status message
and you'll be able to code
[]a user hides and unhides themselves
[]a user closes their account



getting back to the cold forge,
find the existing tables, functions, and components which you have started building this in















./site/stores/helloStore.js
  v
./site/server/api/hello1.js > demonstrationSignHello
./site/server/api/hello2.js > demonstrationSignGet

./site/components/AuthenticateComponent.vue
./site/server/api/authenticate.js
  v
demonstrationSignGet
demonstrationSignUp
demonstrationSignIn
demonstrationSignOut

./icarus/level3.js

demonstrationSignHello > browser_get
demonstrationSignGet   > browser_get, name_get
demonstrationSignUp    >              name_get, name_set, browser_in
demonstrationSignIn    >              name_get,           browser_in
demonstrationSignOut   > demonstrationSignGet,                        browser_out

browser_get
browser_in
browser_out
TABLE browser_table (browser_tag, user_tag, level);

name_get
name_set
name_delete
TABLE name_table (user_tag, normal_text, formal_text, page_text);













uses of checkName
choose or change name
- changed contents of first box
- changed contents of second box
- ok to submit or submitted based on both boxes, on the page
- same thing as that, on the server
demonstration sign up
- typed in sign up box, forgiving
demonstration sign in
- typed in sign in box, forgiving
get to route
- GET to route, decide to 302 or 404 or 200







that's the schema, now here are the functions
a GET request has come in--do we have a user by that name? is the case correct, or should we redirect?
a user is trying to take a name--is it unique for them to take?
 
other user stuff, like status, avatar, goes in profile_table
but we do keep the user's name on the page here
because it's closely related to their route
and because we also want to enforce uniqueness there--we can't let two users both call themseves Tokyo❤️Girl, for instance











wait--how does it work with other sites for users who are too lazy to find and enter a code
do they make this work by matching an unverified email with a correct password?

slightly lazy, somewhat fat-fingered, but not malicious user,
on a simple, common, and happy path

navigates new browser to site for the first time
enteres email
is in(?)
(never completes email code verification flow)

next day, picks up second device
navigates to site
(chooses sign in? sign up again?)
enters the same email
(are they given access to the account they made on device one?)

your question at this point is not how should you design this
but rather to observe how other sites deal with this flow

-

but now also thinking through this
maybe sites solve this by adding a password
and you could solve it by putting dob before email, those two are good enough for a basic user: dob, address, even if unverified








































