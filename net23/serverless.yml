
service: net23
frameworkVersion: '4'
useDotenv: true
plugins:
  - serverless-offline #emulates Lambda and API Gateway for local development
  - serverless-domain-manager #use our domain for API Gateway and Lambda

provider:
  name: aws
  region: us-east-1 #Lambda@Edge requires North Virginia
  runtime: nodejs20.x #as of 2024jul, Node 16 is deprecated, and 18 and 20 are current
  architecture: arm64 #choose Amazon's custom Graviton2 chip for up to 30% quicker start, 25% faster execution, and 20% lower cost compared to default x86_64
  stage: prod #set production by default, as this script includes resources like buckets
  environment: #name variables in .env file here so they are on process.env for the Lambda code
    ACCESS_KEY_SECRET:         ${env:ACCESS_KEY_SECRET}
    ACCESS_AMAZON_CERTIFICATE: ${env:ACCESS_AMAZON_CERTIFICATE} #promises not to change through automatic renewals
  iam: #grant the identity role that runs the lambda functions additional permissions
    role:
      statements:
        - Effect: Allow
          Action:
            - ses:* #give them full run of the messaging apis
            - sns:*
          Resource: '*' #for all the resources we might use, like sns topics or ses domains

# #### FOR API FUNCTIONS ####
functions:
  door: #post, uses door, powers door route demonstration from nuxt page
    handler: src/door.handler
    timeout: 30 #let a Lambda run for 30 seconds, up from default 3 second limit, maximum possible is 15 minutes
    events:
      - http:
          path: door
          method: post #POST because this is a real api call
  message: #post, uses door, powers sending messages from nuxt page
    handler: src/message.handler
    timeout: 30
    events:
      - http:
          path: message
          method: post
  ping5: #get, doesn't use door, responds to checkly pings
    handler: src/ping5.handler
    timeout: 30
    events:
      - http:
          path: ping5
          method: get #GET so you can check it with a regular browser
  snippet2: #get, uses door (so you have to put access key in query string!), visit in browser to confirm moduls can load
    handler: src/snippet2.handler
    timeout: 30
    events:
      - http:
          path: snippet2
          method: get
  test: #get, doesn't use door, manual check to run tiny tests on lambda
    handler: src/test.handler
    timeout: 30
    events:
      - http:
          path: test
          method: get
  # screen: #screen is the lambda@edge function which persons the gate at vhs.net23.cc
  #   handler: src/screen.handler
  #   timeout: 5 #Lambda@Edge limits 5 seconds for the viewer request phase
  #   events: #notice how there's no http event here, instead, it's hooked up to the vhs cloudfront distribution
  #     - cloudFront:
  #         eventType: viewer-request
  #         origin: VHSDistribution
package:
  patterns:
    - '!**'             #exclude everything; following patterns include the folders and files we want in net23.zip
    - 'src/**'          #lambda function handlers
    - 'persephone/**'   #node code used by them
    - 'node_modules/**' #node modules they import
    - 'package.json'    #chat was sure that package.json should be excluded, but that breaks the deployment!
    - 'serverless.yml'  #not necessary but we're throwing it in there

    - '!node_modules/@img/**' #take just the sharp native binaries for amazon linux graviton arm64
    - 'node_modules/@img/sharp-libvips-linux-arm64/**' #outside the docker container, remember to yarn stowaway so these are there!
    - 'node_modules/@img/sharp-linux-arm64/**' #there is another pair with names like "linuxmusl" for Alpine Linux which you don't need

    #even now on the current v4, serverless' package task is pretty broken
    #without nohoist in the root package.json, net23.zip will be empty!
    #aws-sdk is here again, even though it's a devDependency
    #as are all icarus' devDependencies
    #and serverless itself, and its plugins, and their dependencies are here, even though they are all devDependencies!
    #so below, we manually exclude the largest ones; many more small ones are along for the ride

    - '!node_modules/@aws-sdk'

    - '!node_modules/serverless'
    - '!node_modules/xml2js'

    - '!node_modules/serverless-offline'
    - '!node_modules/java-invoke-local'
    - '!node_modules/luxon'
    - '!node_modules/tsx'
    - '!node_modules/web-streams-polyfill'

    - '!node_modules/@esbuild/**'
    - '!node_modules/@babel/**'
    - '!node_modules/@vue/**'
    - '!node_modules/vue/**'
    - '!node_modules/@rollup/**'
    - '!node_modules/rollup/**'
    - '!node_modules/vite/**'
    - '!node_modules/vue-router/**'

resources:
  Resources: #yes, it's correct to have resources twice and nested with different capitalization

    # #### FOR WWW STATIC SITE ####
    # Static site files in a private bucket get served only by a cloudfront distribution
    # Before running this script, perform manual steps to get the domain and ssl certificate
    # And put the ARN of the certificate in the .env file, referenced below

    WWWBucket: #create and configure a bucket
      Type: AWS::S3::Bucket
      Properties:
        BucketName: www-net23-cc #globally unique name in aws
        AccessControl: Private #private because a cloudfront distribution will serve files
    # VHSBucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: vhs-net23-cc
    #     AccessControl: Private

    WWWBucketPolicy: #define a policy for a bucket to allow cloudfront access
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref WWWBucket #the bucket this policy is about
        PolicyDocument: #a policy document with just one statement
          Statement: #allows the specified Principal, cloudfront OAI, to get objects from the bucket
            - Action: 's3:GetObject'
              Effect: Allow
              Resource: !Sub 'arn:aws:s3:::www-net23-cc/*' #reference to all objects in the bucket
              Principal:
                CanonicalUser: !GetAtt WWWAccessIdentity.S3CanonicalUserId
    # VHSBucketPolicy:
    #   Type: AWS::S3::BucketPolicy
    #   Properties:
    #     Bucket: !Ref VHSBucket
    #     PolicyDocument:
    #       Statement:
    #         - Action: 's3:GetObject'
    #           Effect: Allow
    #           Resource: !Sub 'arn:aws:s3:::vhs-net23-cc/*'
    #           Principal:
    #             CanonicalUser: !GetAtt VHSAccessIdentity.S3CanonicalUserId

    WWWAccessIdentity: #create an OAI, a special user, so cloudfront can access the bucket
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: 'Made this OAI so CloudFront can read the www bucket to serve the static website' #comment saved in dashboard
    # VHSAccessIdentity:
    #   Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    #   Properties:
    #     CloudFrontOriginAccessIdentityConfig:
    #       Comment: 'Made this OAI so CloudFront can read the vhs bucket to serve media files at the vhs subdomain'

    WWWDistribution: #create a cloudfront distribution which serves the static website files
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Origins:
            - DomainName: !GetAtt WWWBucket.DomainName #internal aws domain name of the bucket
              Id: WWWOrigin
              S3OriginConfig:
                OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${WWWAccessIdentity}'
          DefaultCacheBehavior:
            TargetOriginId: WWWOrigin
            ViewerProtocolPolicy: redirect-to-https # Redirect HTTP to HTTPS
            ForwardedValues: #required parameter
              QueryString: false #do not forward a query string
              Cookies:
                Forward: none #by our Corporate Policy, Network 23 does not use cookies. the mere thought!
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            DefaultTTL: 86400 #1 day in seconds, how long files stay in cache
            MaxTTL: 172800 #2 days, maximum time in cache
            MinTTL: 0 #zero to let cloudfront revalidate with the origin as needed
          Aliases:
            - www.net23.cc #for the static site, we don't redirect www to the bare domain, we serve it from both
            - net23.cc
          ViewerCertificate:
            AcmCertificateArn: ${env:ACCESS_AMAZON_CERTIFICATE} #get arm from .env file
            SslSupportMethod: sni-only
          Comment: 'Made this CloudFront distribution for www, the static site'
          DefaultRootObject: index.html
    # VHSDistribution:
    #   Type: AWS::CloudFront::Distribution
    #   Properties:
    #     DistributionConfig:
    #       Enabled: true
    #       Origins:
    #         - DomainName: !GetAtt VHSBucket.DomainName
    #           Id: VHSOrigin
    #           S3OriginConfig:
    #             OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${VHSAccessIdentity}'
    #       DefaultCacheBehavior:
    #         TargetOriginId: VHSOrigin
    #         ViewerProtocolPolicy: redirect-to-https
    #         ForwardedValues:
    #           QueryString: true #here, we do want the query string, because it contains the access code
    #           Cookies:
    #             Forward: none
    #         AllowedMethods:
    #           - GET
    #           - HEAD
    #         CachedMethods:
    #           - GET
    #           - HEAD
    #         DefaultTTL: 86400 #1 day in seconds, how long files stay in cache
    #         MaxTTL: 172800 #2 days, maximum time in cache
    #         MinTTL: 0 #no time, allowing cloudfront to always get a fresh version from the bucket if necessary
    #       Aliases:
    #         - vhs.net23.cc #no bare domain here, of course, vhs.net23.cc is the only domain for media files
    #       ViewerCertificate:
    #         AcmCertificateArn: ${env:ACCESS_AMAZON_CERTIFICATE}
    #         SslSupportMethod: sni-only
    #       Comment: 'Made this CloudFront distribution for vhs, the media archive'
    #       DefaultRootObject: index.html
    #       LambdaFunctionAssociations: #here's where we attach the Lambda@Edge function
    #         - EventType: viewer-request
    #           LambdaFunctionARN: !GetAtt screen.Arn

    Net23DomainRecords: #define a group of dns records in route 53
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneName: net23.cc. #we manually made this hosted zone before mentioning it here
        RecordSets:

          # bare domain goes to static site
          - Name: net23.cc. #ends with dot to indicate fully qualified
            Type: A #dns A records are for ipv4 addresses; AAAA below is for ipv6
            AliasTarget:
              DNSName: !GetAtt WWWDistribution.DomainName
              HostedZoneId: Z2FDTNDATAQYW2 #aws identifier for cloudfront
          - Name: net23.cc.
            Type: AAAA
            AliasTarget:
              DNSName: !GetAtt WWWDistribution.DomainName
              HostedZoneId: Z2FDTNDATAQYW2

          # www subdomain goes to static site
          - Name: www.net23.cc.
            Type: A
            AliasTarget:
              DNSName: !GetAtt WWWDistribution.DomainName
              HostedZoneId: Z2FDTNDATAQYW2
          - Name: www.net23.cc.
            Type: AAAA
            AliasTarget:
              DNSName: !GetAtt WWWDistribution.DomainName
              HostedZoneId: Z2FDTNDATAQYW2

          # vhs subdomain goes to media files
          # - Name: vhs.net23.cc.
          #   Type: A
          #   AliasTarget:
          #     DNSName: !GetAtt VHSDistribution.DomainName
          #     HostedZoneId: Z2FDTNDATAQYW2
          # - Name: vhs.net23.cc.
          #   Type: AAAA
          #   AliasTarget:
          #     DNSName: !GetAtt VHSDistribution.DomainName
          #     HostedZoneId: Z2FDTNDATAQYW2

  Outputs: #outputs, correctly here in the outer resources section, end up in the cloudformation template Outputs tab. things will probably work without creating any outputs here at all, but we're leaving it just in case we later find out it's helpful

    OutputWWWBucket:
      Description: 'Made this output identifier for the bucket for www static site files'
      Value: !Ref WWWBucket
    # OutputVHSBucket:
    #   Description: 'Made this output identifier for the bucket for vhs media files'
    #   Value: !Ref VHSBucket

    OutputWWWDistribution:
      Description: 'Made this output identifier for the CloudFront distribution for www static site files'
      Value: !Ref WWWDistribution
    # OutputVHSDistribution:
    #   Description: 'Made this output identifier for the CloudFront distribution for vhs media files'
    #   Value: !Ref VHSDistribution

    OutputWWWDistributionDomainName:
      Description: 'Made this output identifier for the domain name for www static site files'
      Value: !GetAtt WWWDistribution.DomainName
    # OutputVHSDistributionDomainName:
    #   Description: 'Made this output identifier for the domain name for vhs media files'
    #   Value: !GetAtt VHSDistribution.DomainName

custom:
  serverless-offline:
    httpPort: 4000 #run locally on port 4000 instead of the default 3000 when we do $ npm run local, nuxt wants 3000
  customDomain: #settings for serverless-domain-manager to get lambdas up at api.net23.cc
    domainName: api.net23.cc
    basePath: ''
    stage: ${opt:stage, self:provider.stage}
    createRoute53Record: true
    endpointType: 'regional'
    securityPolicy: 'tls_1_2'
    certificateArn: ${env:ACCESS_AMAZON_CERTIFICATE}
