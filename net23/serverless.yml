
service: net23
frameworkVersion: '3' #version 4 is out, but doesn't work with the plugins
useDotenv: true
plugins:
  - serverless-offline #emulates Lambda and API Gateway for local development
  - serverless-domain-manager #use our domain for API Gateway and Lambda
  - serverless-s3-sync #upload static site files from www with $ npm run sync

provider:
  name: aws
  region: us-east-1 #Lambda@Edge requires North Virginia
  runtime: nodejs20.x #as of 2024jul, Node 16 is deprecated, and 18 and 20 are current
  architecture: arm64 #choose Amazon's custom Graviton2 chip for up to 30% quicker start, 25% faster execution, and 20% lower cost compared to default x86_64
  stage: prod #set production by default, as this script includes resources like buckets
  environment: #name variables in .env file here so they are on process.env for the Lambda code
    ACCESS_KEY_SECRET:         ${env:ACCESS_KEY_SECRET}
    ACCESS_AMAZON_CERTIFICATE: ${env:ACCESS_AMAZON_CERTIFICATE} #promises not to change through automatic renewals
  iam: #grant the identity role that runs the lambda functions additional permissions
    role:
      statements:
        - Effect: Allow
          Action:
            - ses:* #give them full run of the messaging apis
            - sns:*
          Resource: '*' #for all the resources we might use, like sns topics or ses domains

# #### FOR API FUNCTIONS ####
functions:
  door: #post, uses door, powers door route demonstration from nuxt page
    handler: src/door.handler
    timeout: 30 #let a Lambda run for 30 seconds, up from default 3 second limit, maximum possible is 15 minutes
    events:
      - http:
          path: door
          method: post #POST because this is a real api call
  message: #post, uses door, powers sending messages from nuxt page
    handler: src/message.handler
    timeout: 30
    events:
      - http:
          path: message
          method: post
  ping5: #get, doesn't use door, responds to checkly pings
    handler: src/ping5.handler
    timeout: 30
    events:
      - http:
          path: ping5
          method: get #GET so you can check it with a regular browser
  snippet2: #get, uses door (so you have to put access key in query string!), visit in browser to confirm moduls can load
    handler: src/snippet2.handler
    timeout: 30
    events:
      - http:
          path: snippet2
          method: get
  test: #get, doesn't use door, manual check to run tiny tests on lambda
    handler: src/test.handler
    timeout: 30
    events:
      - http:
          path: test
          method: get
package:
  excludeDevDependencies: true #apparently they are not excluded by default
  patterns:

    - '!**' #exclude everything
    - 'node_modules/**' #then include the things we want in net23.zip
    - 'persephone/**'
    - 'src/**'
    - 'package.json'
    - 'serverless.yml'

    - '!node_modules/@img/**' #take just the sharp native binaries for amazon linux graviton arm64
    - 'node_modules/@img/sharp-libvips-linux-arm64/**' #outside the docker container, remember to yarn stowaway so these are there!
    - 'node_modules/@img/sharp-linux-arm64/**' #there is another pair with names like "linuxmusl" for Alpine Linux which you don't need

    - '!node_modules/@esbuild/**' #icarus' biggest devDependencies, which serverless doesn't exclude (facepalm)
    - '!node_modules/@babel/**'
    - '!node_modules/@vue/**'
    - '!node_modules/vue/**'
    - '!node_modules/@rollup/**'
    - '!node_modules/rollup/**'
    - '!node_modules/vite/**'
    - '!node_modules/vue-router/**'

    # some more notes on this package section:
    # in package.json, you moved aws-sdk from -S to -D, and that was all that was necessary to keep it out of the zip
    # chat was sure that the root package.json should be excluded, but this breaks the deployment!
    # and, alongside exclude you can have individually: true, but have not tested that or tried it out to see if it's better

resources:
  Resources: #yes, it's correct to have resources twice and nested with different capitalization

    # #### FOR WWW STATIC SITE ####
    # Static site files in a private bucket get served only by a cloudfront distribution
    # Before running this script, perform manual steps to get the domain and ssl certificate
    # And put the ARN of the certificate in the .env file, referenced below

    WWWBucket: #create and configure a bucket
      Type: AWS::S3::Bucket
      Properties:
        BucketName: www-net23-cc #globally unique name in aws
        AccessControl: Private #private because a cloudfront distribution will serve files

    S3BucketPolicy: #define a policy for a bucket to allow cloudfront access
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref WWWBucket #the bucket this policy is about
        PolicyDocument: #a policy document with just one statement
          Statement: #allows the specified Principal, cloudfront OAI, to get objects from the bucket
            - Action: 's3:GetObject'
              Effect: Allow
              Resource: !Sub 'arn:aws:s3:::www-net23-cc/*' #reference to all objects in the bucket
              Principal:
                CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

    CloudFrontOriginAccessIdentity: #create an OAI, a special user, so cloudfront can access the bucket
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: 'Grant CloudFront access to S3 bucket to serve www.net23.cc' #comment saved in dashboard

    CloudFrontDistribution: #create a cloudfront distribution which serves the static website files
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Origins:
            - DomainName: !GetAtt WWWBucket.DomainName #internal aws domain name of the bucket
              Id: S3Origin
              S3OriginConfig:
                OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https # Redirect HTTP to HTTPS
            ForwardedValues: #required parameter
              QueryString: false #do not forward a query string
              Cookies:
                Forward: none #do not forward cookies
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            DefaultTTL: 86400 #1 day in seconds, how long files stay in cache
            MaxTTL: 31536000 #1 year, maximum time in cache
            MinTTL: 0 #no caching, minimum time in cache
          Aliases:
            - www.net23.cc
            - net23.cc
          ViewerCertificate:
            AcmCertificateArn: ${env:ACCESS_AMAZON_CERTIFICATE} #get arm from .env file
            SslSupportMethod: sni-only
          Comment: 'Distribution for static site www.net23.cc'
          DefaultRootObject: index.html

    Route53RecordSetGroup: #define a group of dns records in route 53
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneName: net23.cc. #we manually made this hosted zone before mentioning it here
        RecordSets:
          - Name: net23.cc. #ends with dot to indicate fully qualified
            Type: A #dns A records are for ipv4 addresses
            AliasTarget:
              DNSName: !GetAtt CloudFrontDistribution.DomainName
              HostedZoneId: Z2FDTNDATAQYW2 #aws identifier for cloudfront
          - Name: www.net23.cc.
            Type: A
            AliasTarget:
              DNSName: !GetAtt CloudFrontDistribution.DomainName
              HostedZoneId: Z2FDTNDATAQYW2
          - Name: net23.cc.
            Type: AAAA #dns AAAA records are for ipv6 addresses
            AliasTarget:
              DNSName: !GetAtt CloudFrontDistribution.DomainName
              HostedZoneId: Z2FDTNDATAQYW2
          - Name: www.net23.cc.
            Type: AAAA
            AliasTarget:
              DNSName: !GetAtt CloudFrontDistribution.DomainName
              HostedZoneId: Z2FDTNDATAQYW2

  # #### FOR WWW STATIC SITE ####
  Outputs: #correctly within the outer resources section
    #values to store in the cloudformation template Outputs tab, not logged out to the console
    S3BucketName:
      Description: Name of the S3 bucket
      Value: !Ref WWWBucket
    CloudFrontDistributionId:
      Description: ID of the CloudFront distribution
      Value: !Ref CloudFrontDistribution
    CloudFrontDomainName:
      Description: Domain name of the CloudFront distribution
      Value: !GetAtt CloudFrontDistribution.DomainName

custom:

  # #### FOR WWW STATIC SITE ####
  s3Sync: #settings for serverless-s3-sync so $ npm run www syncs the www folder up to the bucket behind the distribution for www.net23.cc
    - bucketName: www-net23-cc
      localDir: www
      deleteRemoved: true #remove files in the bucket missing from the folder

  # #### FOR API FUNCTIONS ####
  serverless-offline:
    httpPort: 4000 #run locally on port 4000 instead of the default 3000 when we do $ npm run local, nuxt wants 3000
  customDomain: #settings for serverless-domain-manager to get lambdas up at api.net23.cc
    domainName: api.net23.cc
    basePath: ''
    stage: ${opt:stage, self:provider.stage}
    createRoute53Record: true
    endpointType: 'regional'
    securityPolicy: 'tls_1_2'
    certificateArn: ${env:ACCESS_AMAZON_CERTIFICATE}
