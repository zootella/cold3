





                                                _                         _     
  ___  _ __   ___ _ __     __ _ _ __ __ _ _ __ | |__     ___ __ _ _ __ __| |___ 
 / _ \| '_ \ / _ \ '_ \   / _` | '__/ _` | '_ \| '_ \   / __/ _` | '__/ _` / __|
| (_) | |_) |  __/ | | | | (_| | | | (_| | |_) | | | | | (_| (_| | | | (_| \__ \
 \___/| .__/ \___|_| |_|  \__, |_|  \__,_| .__/|_| |_|  \___\__,_|_|  \__,_|___/
      |_|                 |___/          |_|                                    

open graph cards appear easy, but are hard--the server, instead of the browser, must render
they're also important--they're a new user's first experience with the site, even before they click in




## early notes

you got open graph images working by adding nuxt-og-image:
https://www.npmjs.com/package/nuxt-og-image
https://nuxt.com/modules/og-image
https://nuxtseo.com/docs/og-image/getting-started/introduction

dashboard clicking steps were:
cloudflare dashboard, workers and pages, KV, create a namespace
OG_IMAGE_CACHE, name
then the dashboard generates an id, pasted that into wrangler.toml

this was enough to get image caching working; you can see them in the dashboard
keys have nuxt og image module version:route:not sure, like:
3.0.8:index:SQxRoEWOgn
3.0.8:card:whatever-you-put-here:a04axs96VI
values like:
{
	"value":"iVBORw0KGgoAAAANSUhEUgAABLA... (whole thing is 159 KB when downloaded) ...NW84AAAAASUVORK5CYII=",
	"headers":{
		"Vary":"accept-encoding, host",
		"etag":"W/\"fvJ5qGVPK5\"",
		"last-modified":"Sat, 09 Nov 2024 02:39:05 GMT",
		"cache-control":"public, s-maxage=604800, stale-while-revalidate"
	},
	"expiresAt":1731724745242
}

urls like:

http://localhost:3000/__og-image__/image/og.png
http://localhost:3000/__og-image__/image/og.svg

https://cold3.cc/__og-image__/image/og.png
https://cold3.cc/__og-image__/image/og.svg (deployed, svg doesn't work; not sure why but doesn't matter)

still to investigate further:

how is this actually working? it's amazing that it doesn't need a lambda after all!
https://github.com/vercel/satori renders the SVG, and then
https://github.com/thx/resvg-js converts SVG -> PNG, all on the worker

how does the cache expiration work?
if a post is very popular, you want to deliver the card instantly to thousands of followers
but also, if a user edits their post, they want the card to immediately show the edited information

and you've tried the ?purge flag, like
https://cold3.cc/__og-image__/image/og.png?purge
but it doesn't always regenerate the image

you've set cards with defineOgImageComponent() in index.vue and card/[more].vue
but what if someone sends a link to cold3.cc/settings
you want the same card as the home page
can you define a global card, which then gets overridden with a user page or post card?










## notes about the nuxt-og-image module on cloudflare workers

https://nuxt.com/modules/og-image
https://nuxtseo.com/docs/og-image/getting-started/introduction

https://github.com/nuxt-modules/og-image
https://www.npmjs.com/package/nuxt-og-image - 41k weekly downloads, low

$ yarn run nuxi module add og-image

+++ b/nuxt.config.ts
-  modules: ["nitro-cloudflare-dev"]
+  modules: ["nitro-cloudflare-dev", "nuxt-og-image"]

+++ b/package.json
 	"dependencies": {
+		"nuxt-og-image": "5.1.6",
+		"@unhead/vue": "^2.0.5",
+		"unstorage": "^1.15.0",
 	},

used the nuxi module install instead of installing manually
edits nuxt config to add the module
pins the module version, only place we've got no carrot!
and also brings in those two peer dependencies, unhead and unstorage

testing this out local and deployed, here's are your observations

you're seeing three speeds:
3244ms new image the worker had to generate
552ms that same route in a new browser; here you think it's coming from the cloudflare KV cache
2ms a browser refresh quickly gets the image from the browser cache

there seems to be a local cache, as locally you occasionally see a really old hashed card

the card is new and correct only for the first hit, not later if you navigate around the site
this is ok, you suppose, as these cards appear for non-browser clients, which only do a first hit
essentially, you're observing that it works like this:
when the tab loads, the meta tags that lead to the card are set
so if you start on the home page, you get the home card, even if you then navigate to the card page
if you do a browser reload, that's the tab loading, so you get a new card
you're seeing this behavior running both locally and deployed, also






notes about the kv store





paste in here
- example meta tags you get
- example key and value text from the dashboard




## monkey patch the nitro driver

// ~/plugins/kv-ttl.js
import { defineNitroPlugin } from 'nitro/app'

export default defineNitroPlugin((nitroApp) => {
  const kvDriver = nitroApp.storage.getDriver('cloudflare-kv-binding')
  const originalPut = kvDriver.put.bind(kvDriver)
  kvDriver.put = (key, body) =>
    // now passes a 1,200â€¯s TTL to KV
    originalPut(key, body, { expirationTtl: 60 * 20 })
})

but before you do that, perhaps
- nuxt og image will get this set correctly from the existing setting
- wrangler will allow a delete * you can just periodically run
- there will be a delete * in the dashboard or something

the dashboard doesn't have a empty, it does have a delete the whole store
you could do that and then set it up again really fast
a new deploy could switch to a B store letting you delete the A store, and then next month, switch back





*/






















































