


ok, now you're here to rethink this, as follows:

[1] browser tag in secure private cookie
sent with every request
even the very first GET
can and must keep private from the page
no change to regulatory requirements
now there is an expiration: 395 days after their most recent visit
more secure than local storage because a browser extension cannot see the tag

[2] quick monoloth design
unify hello1 and hello2 into a single hello
for a first time visitor, hello will do one database query and the person will have the brochure page in ~150ms
for a signed-in and subscribed user, hello will do lots of queries, taking more time
delay_table will record real users' experiences
all users will go from a blank page to a fully hydrated one
this will be a better experience than a page that, in several steps, expands into existance
several steps makes the page look slow; all-at-once hides the delay in the person's internet connection (Verizon's fault, not ours)
this design expects that the intent is that even for a complex user, this is still fast enough that we do not put a logo or spinner on the page before everything is loaded





ok, looking at the sequence diagram now, you thought this was going to be about merging hello1 and hello2
but really it's going to be about doing everything on the very first GET, and getting rid of hello entirely!



1 -- browser GETs to server (this is hello0 the very first GET, before a POST to hello1)

right off the bat the server has:
- browser tag, from a cookie or just now set by middleware
- requested route, the creator page and card the user wants to see
- ip address, from connection
- user agent string, from headers

2 -- server responds with page and store

server writes to delay_table how long we took to prepare the page
server sends a pretty complete page to the browser, which is awesome, cookies really helped here

3 -- page POSTs to /api/hello

ok, at this point, what can the page say that the server doesn't already know?
browser graphics, but that's not important to keep as a feature, even, if it complicates this

page never knows browser tag, but browser puts it there again for server to match up

4 -- /api/hello1 responds with user and level

server reads ip address from connection
server reads user agent string from headers
server reads browser tag from body (changed to cookie)
server reads browser graphics from body (may get rid of entirely)
server reads time from its trusted clock

(now we can look things up)
browser tag -> user tag signed in here
user tag -> user name

5 -- page POSTs to /api/hello2





wow, this totally changes (for the better) the whole hello system, which is recent, and vast
mapping out how it works

hello.txt - notes adn guide
helloPlugin.client.js - runs only on the client, early in the tab's startup, filling
helloStore.js - this pinia store, which fetches
hello1.js - from these two endpoints
hello2.js
HelloComponent.js - shows stuff on the page from the same store, after the client plugin filled it

ok, for regular old fashioned faster and better GET, all PHP-style, the flow to follow is the hit flow:

page2.vue - GET straight to this page which has
HitComponent.vue - page component that reads from
hitStore.js - which fetches to
hit.js - endpoint

and, of course, all this runs both SSR and CSR, depending on if you GET straight to page2, or start on page1 or index and click over there
ok, so that's the pattern to understand to build hello0, the cookie and first GET-based system that replaces the whole previous and now legacy hello1 and hello2

bookmark april



















(previous notes)

./plugins/helloPlugin.client.js - runs as soon as the page hits a new tab; calls helloStore.hello1()
./stores/helloStore.js - .hello1() fetches to the first endpoint:
./server/api/hello1.js - very quickly tells if there's a user at this browser tag or not
./server/api/hello2.js - slower nonessential first run on tab tasks, like getting user stage and permissions information, logging the hit; this happens while components are loading and the user is clicking

maybe have layouts for:
brochure, no user is signed in yet
feed, user consuming content
panel, user changing their password
terms, legal docs like privacy and terms, static and minimal
machine, like ping, not meant for users to visit

1 -- browser GETs to server

get includes creator route--[]work on this new part next!

2 -- server responds with page and store

server can read ip address from connection
server can read user agent string from headers

3 -- page POSTs to /api/hello1

page includes browser tag in body
page includes browser graphics in body

4 -- /api/hello1 responds with user and level

server reads ip address from connection
server reads user agent string from headers
server reads browser tag from body
server reads browser graphics from body
server reads time from its trusted clock

(now we can look things up)
browser tag -> user tag signed in here
user tag -> user name

5 -- page POSTs to /api/hello2




it's fine to send a user tag to the page
never send a browser tag to the page!





thinking about the entire starting flow, you see why cookies may be better:
1 sent with every request, including the first GET, so saves ~150ms
2 page code can't read them, so a malicious browser extension can't get the browser tag
not sure if these two benefits are worth the drawbacks
- cookie regulation compliance
- browser cookie cleanup policies
- expiration dates and renewals

but looks like is possible, and would use
nuxt middleware
and code like this:
export default defineEventHandler((event) => {
    const cookieName = 'browser-uuid';
    const cookies = parseCookies(event);
    if (!cookies[cookieName]) {
        const uuid = uuidv4();
        setCookie(event, cookieName, uuid, {
            httpOnly: true,  // Prevent access from client-side JavaScript
            secure: true,    // Ensure it's only sent over HTTPS
            sameSite: 'Strict', // Prevent cross-site request forgery
            maxAge: 10 * 365 * 24 * 60 * 60 // Long lifespan (10 years)
        });
    }
});







/*
ttd april
the eventual design that is best may also be quite simple:
there isn't a hello1 and hello2, there's just one hello
the browser sends the browser tag automatically with every GET and POST, so you have it from the first hit
a brand new visitor gets a brochure page from hello after a single ~150ms query, which is great
a returning, signed in, subscribed user's request takes longer, maybe ~500ms
the page goes from entirely blank to entirely populated for that user
this may be a better experience than, during 500ms, different parts of the page pop into existance

let's call this design the "quick monolith"
and, it can still be split into two, the first is everything necessary to completely get th epage ready
the second one records the hit, as well as documents the speed of the quick monolith, it's log only
ok, so it is hello1 and hello2, still
well actually, if you hit the database a lot of times, cloudflare may optimize near there
and, you can record the duration right in the endpoint
so yeah, let's go back to quick monolith after all
*/


	/*
	/api/hello2

	taking more time, give a new tab more information from is browserTag and graphics hardware
	like the user name
	stage of teh user, like anonymous, current, suspended, closed
	permission level of the user, like signed in normally, signed in for an hour of advanced permissions
	creator or not

	also log a hit, the quarter day unique rows in hit_table
	browser tag, from body
	graphics hardware, from body
	user agent string, from headers, so these are less trustworthy
	geography, from cloudflare
	ip address, from cloudflare
	tick now, from cloudflare, so these are more trustworthy

	hello2 can take more time because the page is running now with loading components while we get this info in parallel


		let data = await $fetch('/api/hello2', {method: 'POST', body: {
		}})
		sticker2.value = data.sticker
		userTag.value = data.userTag
		userName.value = data.userName
	*/


	//ttd march, trying to do things in parallel with keepPromise, you were getting 4s delays on the page, "gave up waiting" errors in datadog, and 409 (Conflict) errors in supabase dashboard logs. so, you're going to do things one at a time from now on. but still, this is worrysome
	//ttd april, you should factor the above block into a function in level3 which you give the headers

	/*
	/api/hello2

	taking more time, give a new tab more information from is browserTag and graphics hardware
	like the user name
	stage of teh user, like anonymous, current, suspended, closed
	permission level of the user, like signed in normally, signed in for an hour of advanced permissions
	creator or not

	also log a hit, the quarter day unique rows in hit_table
	browser tag, from body
	graphics hardware, from body
	user agent string, from headers, so these are less trustworthy
	geography, from cloudflare
	ip address, from cloudflare
	tick now, from cloudflare, so these are more trustworthy

	hello2 can take more time because the page is running now with loading components while we get this info in parallel


		let data = await $fetch('/api/hello2', {method: 'POST', body: {
		}})
		sticker2.value = data.sticker
		userTag.value = data.userTag
		userName.value = data.userName
	*/



//./plugins/helloPlugin.client.js

export default defineNuxtPlugin(async (nuxtApp) => {

	const helloStore = useHelloStore()
	await helloStore.hello1()//$fetch-es to /api/hello1 on first call, does not do that on later calls
	//await hello1, as a whole bunch of components will render depending on helloStore.userTag or not
	//but don't await this one, just get it started now, when the page hits a new tab, and let it happen in a moment after there are already components on the page

	/*
	ttd april, all of this will change with the cookie based browser tag, and that's fine
	also, you're thinking you do a quick monolith single hello, to show the user a complete rendered page all at once, rather than a page that grows and snaps open in more than one step
	*/
})







https://nuxt.com/docs/api/composables/use-async-data
is getting this right why it makes sense to use useAsyncData?

you added this to HitComopnent:

because, before, you were awaiting on the margin, and that seemed to work, but chat says it doesn't work
and when you did that, the hit component box appears before the hits now
and you're not sure if you can still see the sticker change from CloudPageServer to CloudPageClient

important:
[]confirm you can still get the page2 HitComponent "all at once" render experience
[]confirm you can still get it to change from Local/CloudPageServer to Local/CloudPageClient depending on if you navigate to, or click to, page2
[]undersatand, once and for all, or perhaps next, where to use $fetch versus useFetch and useAsyncData, now with pinia stores, and so on



















