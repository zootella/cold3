




./plugins/helloPlugin.client.js - runs as soon as the page hits a new tab; calls helloStore.hello1()
./stores/helloStore.js - .hello1() fetches to the first endpoint:
./server/api/hello1.js - very quickly tells if there's a user at this browser tag or not
./server/api/hello2.js - slower nonessential first run on tab tasks, like getting user stage and permissions information, logging the hit; this happens while components are loading and the user is clicking





maybe have layouts for:
brochure, no user is signed in yet
feed, user consuming content
panel, user changing their password
terms, legal docs like privacy and terms, static and minimal
machine, like ping, not meant for users to visit













1 -- browser GETs to server

get includes creator route--[]work on this new part next!

2 -- server responds with page and store

server can read ip address from connection
server can read user agent string from headers

3 -- page POSTs to /api/hello1

page includes browser tag in body
page includes browser graphics in body

4 -- /api/hello1 responds with user and level

server reads ip address from connection
server reads user agent string from headers
server reads browser tag from body
server reads browser graphics from body
server reads time from its trusted clock

(now we can look things up)
browser tag -> user tag signed in here
user tag -> user name

5 -- page POSTs to /api/hello2











it's fine to send a user tag to the page
never send a browser tag to the page!





thinking about the entire starting flow, you see why cookies may be better:
1 sent with every request, including the first GET, so saves ~150ms
2 page code can't read them, so a malicious browser extension can't get the browser tag
not sure if these two benefits are worth the drawbacks
- cookie regulation compliance
- browser cookie cleanup policies
- expiration dates and renewals

but looks like is possible, and would use
nuxt middleware
and code like this:
export default defineEventHandler((event) => {
    const cookieName = 'browser-uuid';
    const cookies = parseCookies(event);
    if (!cookies[cookieName]) {
        const uuid = uuidv4();
        setCookie(event, cookieName, uuid, {
            httpOnly: true,  // Prevent access from client-side JavaScript
            secure: true,    // Ensure it's only sent over HTTPS
            sameSite: 'Strict', // Prevent cross-site request forgery
            maxAge: 10 * 365 * 24 * 60 * 60 // Long lifespan (10 years)
        });
    }
});














