


both error and hit are going to come from the page
you like the organization of
.page
.browser
.worker, separated by trust

these are different enough that you shouldn't try to unify them

graphics (page)
agent (browser)
browserTagHash (browser)

page.graphics
browser.agent
browser.browserTagHash
browser.userTag
worker.ip
worker.geography



there are three similar here:
- error, POSTed by the page, rare, exhaustive, goes to datadog not supabase
- hit, hit_table, POSTed by the page, common, goes to supabase, hashes to coalesce per hour
- delay, delay_table, POSTed by the page, common, goes to supabase, sunsetted


for delay have multiple slots even if you don't use them
delay1
delay2
delay3 (and you can always add slots later)
-1 means not in use
Hello.
delay1 - browser measurement, navigation to start of this post
delay2 - server measurement echoed by page, how long the server task ran (so 2 is entirely inside 1, and 1 has browser stuff before and after 2! clocks not aligned, so you can't split up well)




actually, you can record a lot in delay_table, because crons will summarize or just drop older than 30d or whatever
so go crazy, sure, get even 
and then see if you can have helper functions that work for both error and 










	//(1) information script on the page is telling us; least trustworthy
	report.page = {
		graphics:    body.graphics,
	}

	//(2) information the browser is telling us; more trustworthy
	report.browser = {
		agent: headerGetOne(headers, 'user-agent'),
		browserTagHash:,
		user: await browserToUser({browserTag}),//look up what user is signed in to this browser
	}

	//(3) information cloudflare is telling us; trustworthy
	report.worker = {
		ip: headerGetOne(headers, 'cf-connecting-ip'),//returns undefined so stringification will omit the property!
		geography: {
			country: headerGetOne(headers, 'cf-ipcountry'),//this one is always present
			city:    headerGetOne(headers, 'cf-ipcity'),//remaining ones are sometimes present
			region:  headerGetOne(headers, 'cf-region-code'),
			postal:  headerGetOne(headers, 'cf-postal-code'),
		},
	}





	//get information from cloudflare about the headers, you'll use these for (1) sudo access and (2) hit log, ttd march
	r.connection = {
		ipAddress: headerGetOne(headers, 'cf-connecting-ip'),//returns undefined so stringification will omit the property!
		geography: {
			country: headerGetOne(headers, 'cf-ipcountry'),//this one is always present
			city:    headerGetOne(headers, 'cf-ipcity'),//remaining ones are sometimes present
			region:  headerGetOne(headers, 'cf-region-code'),
			postal:  headerGetOne(headers, 'cf-postal-code'),
		},
		browser: {
			agent:   headerGetOne(headers, 'user-agent'),//what the browser told cloudflare
			//ttd april, here's where you can add back renderer and vendor; and maybe reorganize into .page, .browser, .worker, matching error.js, also
		},
	}
	//record the hit
	if (isCloud({uncertain: 'Cloud.'})) {
		await recordHit({
			origin: door.origin,
			browserTag,
			userTag: toTextOrBlank(r.user.userTag),//we can't do this first because we need the user tag
			ipText: toTextOrBlank(r.connection.ipAddress),
			geographyText: stringo(r.connection.geography),
			browserText: stringo(r.connection.browser),
		})
	}





























