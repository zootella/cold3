
//up3.vue
/*
the new tests page, with
[x]separated server and client rendering
[x]a refresh button on the page
[x]dynamic loading of worker and lambda tests, so you don't have to wait to navigate in
[]unlike everywhere else, catch an error, and show it in a <pre>, be able to make a mess in a test anywhere in the stack, persephone, an api endpoint, and see what went wrong exactly on the page



notes from early run:

KEVHNPK CloudPageServer 0ms ✅ 672 assertions in 76 tests on Mon05:47p33.498s
KEVHNPK CloudPageClient 18ms ✅ 674 assertions in 77 tests on Mon05:47p33.718s
KEVHNPK CloudNuxtServer 0ms ✅ 674 assertions in 77 tests on Mon05:47p33.824s
KEVHNPK CloudLambda 322ms ✅ 680 assertions in 81 tests on Mon05:47p34.821s Reload


maybe show outer and inner times, as the lambda ran tests for 322ms, but the fourth line takes a full second to arrive, as evidenced by the on times on the right

also, how is 0ms possible? it's not; measure the actual durations correctly for nuxt server render and api handler




*/



//test.js
/*
ttd april, necessary bike shed improvements
[]refactor to use fetchNet23 or whatever you call that
[]line up green checks, where, and hashes, this is what you look at
[]the page should show up even while the tests are rolling in
[]make a [Run] button which reruns the tests
[]make a ping6done that only shows with three green checkmarks, and hookup to checkly
*/

/* tiny tests run six places:
-- ./pages/ping/test.vue      nuxt page, server and client rendered
-> ./server/api/ping/test.js  nuxt api
-- ./net23/src/test.js        lambda
-- ./icarus/icarus.vue        vite
-- ./test.js                  node
*/

/*
2024sep18 curled and then copied rendered page, and it's weird!

curl: script setup says: ✅ 286 assertions in 35 tests ..., CloudPageServer: Envi.Proc.Scri.Self.Serv.Zulu,           1726687578574
page: script setup says: ✅ 458 assertions in 41 tests ..., CloudPageClient: Achr.Asaf.Awin.Docu.Doma.Self.Stor.Wind, 1726687559648
the tags CloudPageServer and CloudPageClient are both there correctly, and it makes sense that code can access more tests in the full browser

curl: worker says:       ✅ 286 assertions in 35 tests ..., CloudNuxtServer: Aclo.Envi.Proc.Scri.Self.Zulu,           1726687578966
page: worker says:       ✅ 456 assertions in 40 tests ..., CloudNuxtServer: Aclo.Envi.Proc.Scri.Self.Zulu,           1726687560371
here, we're fetching an API endpoint, but interestingly, the server rendered fetch is just like CloudPageServer--so maybe it doesn't really fetch, it just calls?

curl: lambda says:       ✅ 458 assertions in 41 tests ..., CloudLambda:     Eigh.Envi.Glob.Lamb.Node.Proc.Regi.Zulu, 1726687579024
page: lambda says:       ✅ 458 assertions in 41 tests ..., CloudLambda:     Eigh.Envi.Glob.Lamb.Node.Proc.Regi.Zulu, 1726687560384
amazon is totally separate from nuxt so these sorta have to be the same
*/







/* tiny tests run six places:
-> ./pages/ping/test.vue      nuxt page, server and client rendered
-- ./server/api/ping/test.js  nuxt api
-- ./net23/src/test.js        lambda
-- ./icarus/icarus.vue        vite
-- ./test.js                  node
*/

/*
TODO note to remove tests from production
does including tiny tests in nuxt mean the whole bundle, even in production, is unnecessarily larger?
you may want to comment this out at the end
there's also process.env.NODE_ENV != 'production'
*/










