
/*
mainStore 🍍 loads on server, updates on page as user clicks
flexStore 🍍 loads on server or page, depending on the GETed route, for demonstration in development
pageStore 🍍 starts empty on server and client at the start, updates on page
*/


/*
ttd april, more to explore with universal rendering

figure out how SSR spreads out
the flow where, all in the same GET, all on the server, several fetches load items into arrays
which populate additional components
and then those components do additional fetches, continuing until you've got the whole tree done

figure out the boundary between SSR and CSR
for instance, how do you, on a more distant component, say, no, let's switch to doing this on the client

figure out the right way to load a hybrid store
you can see client, client from: navigate page1, click to page2, press Hit button
you can see server, client from: navigate page2, press Hit button
but the navigate to page2 is bad because there's a pause as the margin await holds rendering on the client
so experiment with:
if (process.server) await flexStore.load(); else flexStore.load()
but also, this is largely academic, as mainStore and pageStore will probably do everything you need
*/

you have imagined, but not yet implemented the flow where main store, on server render, populates an array
causing a v-if to open and a v-for to grow
causing more components, SomeItem, to be included in the render (all still, remember, on the server!)
causing another fake fetch to another endpoint (separate from the first fetchWorker('/api/load' ...)
causing more data to fill into main store, or another store, and this process to continue further, potentially



ttd april
figure out using index
try using it for codes right now, actually
confirmed codes can use
[x]store method that replaces index entirely
[x]store where you directly helloStore.codes = codes (this is the only way to make a list smaller)
[]list with index on top (this should work, but you aren't using it right now)
make a button that refreshes records, unnecessarily of course (to be able to test this)









store organization
do it by where they'r eused


mainStore - loads on server, updates as the user clicks the page
flexStore - loads on server or client depending on starting route, really just for demonstration while coding
pageStore - loads only on page



errorStore -> pageStore
turnstileStore -> pageStore

helloStore -> mainStore
routeStore -> mainStore

hitStore -> flexStore












//notes from routeStore.js
/*
ttd february

stuff on the page about the user can't be delivered pre-rendered
because the page has to run to get the browser tag
and then post that to helloStore

but stuff on the page about the route can
this is the page, as it appears publicly, related to the user at the link
so you're imagining routeStore fills out this information

and you can get it started soon, as users will have status messages
*/








flex store notes
page1 - blank
page2 - hit component
then if you refresh on page1, and click to page2:
- there's a pause on the route change as hit component gets the hit
- hits from CloudPageClient
then press the hit button
- hits from CloudPageClient
then refresh the browser, page comes all at once
- hits from CloudPageServer
then press the hit button
- hits from CloudPageClient

[]make it so the async only happens if we're already on the server, indicating an initial render
maybe as simple as:
if (process.sever) async flexStore.load()
ok, but then you have to figure out how, if we're already on the client, you load the store not async

and, the whole flow around a hybrid store may be academic, in that:
(1) you've got mainStore working with universal rendering, it always starts out on the server, and
(2) pageStore is fine in that it starts out empty on the server and page, and then calls from the page grow it, it just doesn't have a load method






//from flexStore.js
//not allowed to use await here, either, apparently
/*
ttd april
so here we are in a store which can run on the server, or the client
if it runs on the server, $fetch is actually a function call
there's already a request, the very first GET, and our middleware ran before we got here
hit.js below will run as the result of our fetch, and it will have the browser tag
so you think you can imagine these stores don't need the browser tag, even when they're running on the server, and could get the browser tag
*/









